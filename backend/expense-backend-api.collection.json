{
  "info": {
    "_postman_id": "expense-tracker-api-collection-v1",
    "name": "Expense Tracker API (Hono/Bun)",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
    "_exporter_id": "generated-by-ai",
    "description": {
      "content": "## Expense Tracker Backend API\n\nA comprehensive collection for the Expense Tracker API built with Hono, Bun, Drizzle ORM, and PostgreSQL.\n\n**Features Covered:**\n\n*   User Authentication (JWT, Signup, Login, Password Reset, Profile Update, AI Key Management)\n*   Account Management (CRUD, Sharing, Import/Export, Statements, Analytics)\n*   Transaction Management (CRUD, Recurring, Filtering, Import/Export, Analytics)\n*   Category Management (CRUD)\n*   Budgeting (CRUD, Summary, Progress, Notifications - via Cron)\n*   Saving Goals (CRUD, Contributions, Notifications - via Cron)\n*   Investment Tracking (Accounts, Holdings, Dividends, Portfolio Summary/History, Stock API Integration)\n*   Debt Management (CRUD, Interest Calculation, Marking Paid)\n*   AI Assistant (Prompt processing with tool usage)\n\n**Authentication:**\n\nMost endpoints require authentication. Log in using the `User Auth > Log In` request to obtain a JWT token. Add this token to the `auth_token` collection variable or manually add an `Authorization` header to subsequent requests:\n`Authorization: Bearer {{auth_token}}`\n\n**Variables:**\n\n*   `{{base_url}}`: The base URL of your running backend service (e.g., `http://localhost:1337`).\n*   `{{auth_token}}`: The JWT token obtained after logging in.\n\n**Note:** Replace placeholder path variables like `:userId`, `:accountId`, `:transactionId`, etc., with actual IDs obtained from previous API calls. Check environment variables (`.env`) for required settings like `JWT_SECRET` and `AI_API_KEY_ENCRYPTION_SECRET`.",
      "type": "text/markdown"
    }
  },
  "variable": [
    {
      "key": "base_url",
      "value": "http://localhost:1337",
      "type": "string",
      "description": "Base URL for the API service (e.g., http://localhost:1337 or your deployment URL)."
    },
    {
      "key": "auth_token",
      "value": "",
      "type": "string",
      "description": "JWT Authentication token obtained after successful login. Used in the Authorization header (Bearer {{auth_token}})."
    }
  ],
  "item": [
    {
      "name": "User Auth",
      "description": "Endpoints for user registration, login, password management, and profile updates.",
      "item": [
        {
          "name": "Sign Up",
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "name",
                  "value": "Test User",
                  "type": "text",
                  "description": "(Required) User's full name (1-64 characters)."
                },
                {
                  "key": "email",
                  "value": "test@example.com",
                  "type": "text",
                  "description": "(Required) User's unique email address (valid email format)."
                },
                {
                  "key": "password",
                  "value": "Strongpass@123",
                  "type": "text",
                  "description": "(Required) User's password (min 8 characters)."
                },
                {
                  "key": "profilePic",
                  "type": "file",
                  "description": "(Optional) User's profile picture (JPG, JPEG, PNG, GIF). Max 2MB after compression to 250x250.",
                  "src": []
                }
              ],
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{base_url}}/auth/signup",
              "host": ["{{base_url}}"],
              "path": ["auth", "signup"]
            },
            "description": "Registers a new user. Creates a user record, a default account, an associated analytics entry, and sends a welcome email.\n\n**Body:** Uses `form-data`.\n\n**Responses:**\n*   `201 Created`: User created successfully.\n*   `400 Bad Request`: Validation failed (e.g., invalid email, weak password, large image).\n*   `409 Conflict`: User with the provided email already exists.\n*   `500 Internal Server Error`: Database or email sending error."
          },
          "response": [
            {
              "name": "Success - User Created",
              "originalRequest": {
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "formdata",
                  "formdata": [
                    {
                      "key": "name",
                      "value": "Test User",
                      "type": "text"
                    },
                    {
                      "key": "email",
                      "value": "test@example.com",
                      "type": "text"
                    },
                    {
                      "key": "password",
                      "value": "Strongpass@123",
                      "type": "text"
                    }
                  ]
                },
                "url": {
                  "raw": "{{base_url}}/auth/signup",
                  "host": ["{{base_url}}"],
                  "path": ["auth", "signup"]
                }
              },
              "status": "Created",
              "code": 201,
              "_postman_previewlanguage": "json",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "cookie": [],
              "body": "{\n    \"message\": \"User created successfully!\"\n}"
            },
            {
              "name": "Error - User Exists",
              "originalRequest": {
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "formdata",
                  "formdata": [
                    {
                      "key": "name",
                      "value": "Existing User",
                      "type": "text"
                    },
                    {
                      "key": "email",
                      "value": "test@example.com",
                      "type": "text"
                    },
                    {
                      "key": "password",
                      "value": "Strongpass@123",
                      "type": "text"
                    }
                  ]
                },
                "url": {
                  "raw": "{{base_url}}/auth/signup",
                  "host": ["{{base_url}}"],
                  "path": ["auth", "signup"]
                }
              },
              "status": "Conflict",
              "code": 409,
              "_postman_previewlanguage": "json",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "cookie": [],
              "body": "{\n    \"message\": \"User with this email already exists\",\n    \"status\": 409\n}"
            }
          ]
        },
        {
          "name": "Log In",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "try {",
                  "    const response = pm.response.json();",
                  "    if (response && response.data && response.data.token) {",
                  "        pm.collectionVariables.set(\"auth_token\", response.data.token);",
                  "        console.log(\"Auth token set successfully!\");",
                  "    } else {",
                  "        console.log(\"Token not found in the response.\");",
                  "    }",
                  "} catch (e) {",
                  "    console.error(\"Error parsing response or setting token:\", e);",
                  "}"
                ],
                "type": "text/javascript",
                "packages": {}
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json",
                "type": "text"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"email\": \"test@example.com\",\n    \"password\": \"Strongpass@123\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{base_url}}/auth/login",
              "host": ["{{base_url}}"],
              "path": ["auth", "login"]
            },
            "description": "Authenticates a user using email and password.\n\n**Body (JSON):**\n*   `email` (string, required): User's registered email.\n*   `password` (string, required): User's password (min 8 characters).\n\n**Responses:**\n*   `200 OK`: Returns JWT token and basic user info. Set the `auth_token` variable with the returned token using the Tests script.\n*   `401 Unauthorized`: Invalid credentials.\n*   `403 Forbidden`: User account is inactive.\n*   `400 Bad Request`: User logged in via social account.\n*   `404 Not Found`: User with the provided email does not exist.\n*   `500 Internal Server Error`: Database error."
          },
          "response": [
            {
              "name": "Success - Logged In",
              "originalRequest": {
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"email\": \"test@example.com\",\n    \"password\": \"Strongpass@123\"\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{base_url}}/auth/login",
                  "host": ["{{base_url}}"],
                  "path": ["auth", "login"]
                }
              },
              "status": "OK",
              "code": 200,
              "_postman_previewlanguage": "json",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "cookie": [],
              "body": "{\n    \"data\": {\n        \"token\": \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6IjAxeGRjYmEtZjEwMC03MDAwLThmNjEtZGFhYzA1YzVjNzhlIiwiZW1haWwiOiJ0ZXN0QGdtYWlsLmNvbSIsImV4cCI6MTcyMTU0MzYwMCwiaWF0IjoxNzIxNTQwMDAwfQ.EXAMPLE_TOKEN_SIGNATURE\",\n        \"user\": {\n            \"id\": \"01exdcba-f100-7000-8f61-daac05c5c78e\",\n            \"name\": \"Test User Updated\",\n            \"email\": \"test@gmail.com\",\n            \"profile\": \"data:image/webp;base64,\",\n            \"preferredCurrency\": \"INR\"\n        }\n    }\n}"
            },
            {
              "name": "Error - Invalid Credentials",
              "originalRequest": {
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"email\": \"test@example.com\",\n    \"password\": \"wrongpassword\"\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{base_url}}/auth/login",
                  "host": ["{{base_url}}"],
                  "path": ["auth", "login"]
                }
              },
              "status": "Unauthorized",
              "code": 401,
              "_postman_previewlanguage": "json",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "cookie": [],
              "body": "{\n    \"message\": \"Invalid credentials\",\n    \"status\": 401\n}"
            }
          ]
        },
        {
          "name": "Get Me",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{auth_token}}",
                "type": "text",
                "description": "JWT token obtained from login."
              }
            ],
            "url": {
              "raw": "{{base_url}}/auth/me",
              "host": ["{{base_url}}"],
              "path": ["auth", "me"]
            },
            "description": "Retrieves details of the currently authenticated user (based on the JWT token). Includes a flag indicating if the user has configured an AI API key.\n\n**Authentication:** Required (`Bearer Token`).\n\n**Responses:**\n*   `200 OK`: Returns user details (excluding password and raw encrypted key).\n*   `401 Unauthorized`/`403 Forbidden`: Invalid or missing token.\n*   `404 Not Found`: User associated with the token not found.\n*   `500 Internal Server Error`: Database error."
          },
          "response": [
            {
              "name": "Success - User Details",
              "originalRequest": {
                "method": "GET",
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}",
                    "type": "text"
                  }
                ],
                "url": {
                  "raw": "{{base_url}}/auth/me",
                  "host": ["{{base_url}}"],
                  "path": ["auth", "me"]
                }
              },
              "status": "OK",
              "code": 200,
              "_postman_previewlanguage": "json",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "cookie": [],
              "body": "{\n    \"id\": \"01exdcba-f100-7000-8f61-daac05c5c78e\",\n    \"name\": \"Test User Updated\",\n    \"email\": \"test@gmail.com\",\n    \"profilePic\": \"data:image/webp;base64,\",\n    \"lastLoginAt\": \"2024-07-21T10:00:00.123Z\",\n    \"createdAt\": \"2024-07-20T20:45:13.309Z\",\n    \"preferredCurrency\": \"INR\",\n    \"hasAiApiKey\": true\n}"
            },
            {
              "name": "Error - Unauthorized",
              "originalRequest": {
                "method": "GET",
                "header": [],
                "url": {
                  "raw": "{{base_url}}/auth/me",
                  "host": ["{{base_url}}"],
                  "path": ["auth", "me"]
                }
              },
              "status": "Forbidden",
              "code": 403,
              "_postman_previewlanguage": "json",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "cookie": [],
              "body": "{\n    \"message\": \"Authorization header not found\",\n    \"status\": 403\n}"
            }
          ]
        },
        {
          "name": "Update User Profile",
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{auth_token}}",
                "type": "text",
                "description": "JWT token obtained from login."
              }
            ],
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "name",
                  "value": "Test User Updated Again",
                  "type": "text",
                  "description": "(Optional) New name for the user (min 3 characters)."
                },
                {
                  "key": "preferredCurrency",
                  "value": "GBP",
                  "type": "text",
                  "description": "(Optional) New preferred currency code (e.g., 'USD', 'EUR', 'INR'). 3 characters."
                },
                {
                  "key": "profilePic",
                  "type": "file",
                  "description": "(Optional) New profile picture (JPG, JPEG, PNG, GIF). Max 2MB after compression.",
                  "src": []
                }
              ]
            },
            "url": {
              "raw": "{{base_url}}/auth/update",
              "host": ["{{base_url}}"],
              "path": ["auth", "update"]
            },
            "description": "Updates the authenticated user's profile information (name, preferred currency, profile picture).\n\n**Authentication:** Required (`Bearer Token`).\n\n**Body:** Uses `form-data`. Provide only the fields you want to update.\n\n**Responses:**\n*   `200 OK`: User updated successfully, returns the fields that were updated.\n*   `400 Bad Request`: Validation failed (e.g., name too short, invalid currency code, large image).\n*   `401 Unauthorized`/`403 Forbidden`: Invalid or missing token.\n*   `500 Internal Server Error`: Database error or image processing error."
          },
          "response": [
            {
              "name": "Success - Profile Updated",
              "originalRequest": {
                "method": "PUT",
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}",
                    "type": "text"
                  }
                ],
                "body": {
                  "mode": "formdata",
                  "formdata": [
                    {
                      "key": "name",
                      "value": "Test User Updated Again",
                      "type": "text"
                    },
                    {
                      "key": "preferredCurrency",
                      "value": "GBP",
                      "type": "text"
                    }
                  ]
                },
                "url": {
                  "raw": "{{base_url}}/auth/update",
                  "host": ["{{base_url}}"],
                  "path": ["auth", "update"]
                }
              },
              "status": "OK",
              "code": 200,
              "_postman_previewlanguage": "json",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "cookie": [],
              "body": "{\n    \"message\": \"User updated successfully\",\n    \"data\": {\n        \"name\": \"Test User Updated Again\",\n        \"preferredCurrency\": \"GBP\",\n        \"profilePic\": \"data:image/webp;base64,\",\n        \"updatedAt\": \"2024-07-21T11:20:30.500Z\"\n    }\n}"
            }
          ]
        },
        {
          "name": "Update User AI API Key",
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{auth_token}}",
                "type": "text",
                "description": "JWT token obtained from login."
              },
              {
                "key": "Content-Type",
                "value": "application/json",
                "type": "text"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"apiKey\": \"AIzaSy...YourGoogleAiApiKey...\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{base_url}}/auth/ai-key",
              "host": ["{{base_url}}"],
              "path": ["auth", "ai-key"]
            },
            "description": "Securely saves or removes the user's AI API key (e.g., for Google AI).\nThe key is encrypted using AES-GCM before being stored in the database.\n\n**Authentication:** Required (`Bearer Token`).\n\n**Body (JSON):**\n*   `apiKey` (string | null): The user's AI API key. Send `null` or an empty string to remove the key.\n\n**Responses:**\n*   `200 OK`: API key saved or removed successfully.\n*   `400 Bad Request`: Invalid request body.\n*   `401 Unauthorized`/`403 Forbidden`: Invalid or missing token.\n*   `404 Not Found`: User not found.\n*   `500 Internal Server Error`: Encryption or database error."
          },
          "response": [
            {
              "name": "Success - AI Key Saved",
              "originalRequest": {},
              "status": "OK",
              "code": 200,
              "_postman_previewlanguage": "json",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "cookie": [],
              "body": "{\n    \"message\": \"AI API Key saved successfully.\"\n}"
            },
            {
              "name": "Success - AI Key Removed",
              "originalRequest": {},
              "status": "OK",
              "code": 200,
              "_postman_previewlanguage": "json",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "cookie": [],
              "body": "{\n    \"message\": \"AI API Key removed.\"\n}"
            }
          ]
        },
        {
          "name": "Update User Preferences (Currency Only)",
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{auth_token}}",
                "type": "text",
                "description": "JWT token obtained from login."
              },
              {
                "key": "Content-Type",
                "value": "application/json",
                "type": "text"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"preferredCurrency\": \"GBP\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{base_url}}/auth/preferences",
              "host": ["{{base_url}}"],
              "path": ["auth", "preferences"]
            },
            "description": "Updates only the preferred currency for the authenticated user.\n\n**Authentication:** Required (`Bearer Token`).\n\n**Body (JSON):**\n*   `preferredCurrency` (string, required): The 3-letter currency code (e.g., 'USD', 'GBP').\n\n**Responses:**\n*   `200 OK`: Preferences updated successfully.\n*   `400 Bad Request`: Invalid currency code format.\n*   `401 Unauthorized`/`403 Forbidden`: Invalid or missing token.\n*   `500 Internal Server Error`: Database error."
          },
          "response": [
            {
              "name": "Success - Preferences Updated",
              "originalRequest": {
                "method": "PUT",
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}",
                    "type": "text"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"preferredCurrency\": \"GBP\"\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{base_url}}/auth/preferences",
                  "host": ["{{base_url}}"],
                  "path": ["auth", "preferences"]
                }
              },
              "status": "OK",
              "code": 200,
              "_postman_previewlanguage": "json",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "cookie": [],
              "body": "{\n    \"message\": \"User preferences updated successfully\"\n}"
            }
          ]
        },
        {
          "name": "Get User Preferences",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{auth_token}}",
                "type": "text",
                "description": "JWT token obtained from login."
              }
            ],
            "url": {
              "raw": "{{base_url}}/auth/preferences",
              "host": ["{{base_url}}"],
              "path": ["auth", "preferences"]
            },
            "description": "Retrieves the preferred currency for the authenticated user.\n\n**Authentication:** Required (`Bearer Token`).\n\n**Responses:**\n*   `200 OK`: Returns the user's preferred currency.\n*   `401 Unauthorized`/`403 Forbidden`: Invalid or missing token.\n*   `500 Internal Server Error`: Database error."
          },
          "response": [
            {
              "name": "Success - User Preferences",
              "originalRequest": {
                "method": "GET",
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}",
                    "type": "text"
                  }
                ],
                "url": {
                  "raw": "{{base_url}}/auth/preferences",
                  "host": ["{{base_url}}"],
                  "path": ["auth", "preferences"]
                }
              },
              "status": "OK",
              "code": 200,
              "_postman_previewlanguage": "json",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "cookie": [],
              "body": "{\n    \"preferredCurrency\": \"GBP\"\n}"
            }
          ]
        },
        {
          "name": "Forgot Password",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json",
                "type": "text"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"email\": \"test@example.com\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{base_url}}/auth/forgot-password",
              "host": ["{{base_url}}"],
              "path": ["auth", "forgot-password"]
            },
            "description": "Initiates the password reset process for a user.\nGenerates a unique reset token, stores it, and sends an email to the user containing a password reset link (using the `FRONTEND_URL` and `RESETPAGE` environment variables).\n\n**Body (JSON):**\n*   `email` (string, required): The email address of the user who forgot their password.\n\n**Responses:**\n*   `200 OK`: Password reset link sent successfully (even if the user doesn't exist, to prevent email enumeration).\n*   `400 Bad Request`: Email is missing or invalid.\n*   `500 Internal Server Error`: Database or email sending error."
          },
          "response": [
            {
              "name": "Success - Reset Link Sent",
              "originalRequest": {
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"email\": \"test@example.com\"\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{base_url}}/auth/forgot-password",
                  "host": ["{{base_url}}"],
                  "path": ["auth", "forgot-password"]
                }
              },
              "status": "OK",
              "code": 200,
              "_postman_previewlanguage": "json",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "cookie": [],
              "body": "{\n    \"message\": \"If a user with that email exists and is active, a password reset link has been sent.\"\n}"
            }
          ]
        },
        {
          "name": "Reset Password",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json",
                "type": "text"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"password\": \"NewStrongPassword123\",\n    \"resetPasswordToken\": \"your_valid_reset_token_here\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{base_url}}/auth/reset-password",
              "host": ["{{base_url}}"],
              "path": ["auth", "reset-password"]
            },
            "description": "Resets the user's password using the token received via email.\n\n**Body (JSON):**\n*   `password` (string, required): The new password (min 8 characters).\n*   `resetPasswordToken` (string, required): The token from the password reset link.\n\n**Responses:**\n*   `200 OK`: Password reset successfully.\n*   `400 Bad Request`: Missing fields, invalid/expired token, or weak password.\n*   `401 Unauthorized`: Mismatch between token and user/state.\n*   `500 Internal Server Error`: Database error."
          },
          "response": [
            {
              "name": "Success - Password Reset",
              "originalRequest": {
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"password\": \"NewStrongPassword123\",\n    \"resetPasswordToken\": \"valid-token\"\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{base_url}}/auth/reset-password",
                  "host": ["{{base_url}}"],
                  "path": ["auth", "reset-password"]
                }
              },
              "status": "OK",
              "code": 200,
              "_postman_previewlanguage": "json",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "cookie": [],
              "body": "{\n    \"message\": \"Password reset successfully!\"\n}"
            },
            {
              "name": "Error - Invalid Token",
              "originalRequest": {
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"password\": \"NewStrongPassword123\",\n    \"resetPasswordToken\": \"invalid-or-expired-token\"\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{base_url}}/auth/reset-password",
                  "host": ["{{base_url}}"],
                  "path": ["auth", "reset-password"]
                }
              },
              "status": "Unauthorized",
              "code": 401,
              "_postman_previewlanguage": "json",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "cookie": [],
              "body": "{\n    \"message\": \"Invalid or expired reset password token: Invalid signature\",\n    \"status\": 401\n}"
            }
          ]
        },
        {
          "name": "Log Out",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{auth_token}}",
                "type": "text",
                "description": "JWT token obtained from login."
              }
            ],
            "url": {
              "raw": "{{base_url}}/auth/logout",
              "host": ["{{base_url}}"],
              "path": ["auth", "logout"]
            },
            "description": "Logs out the currently authenticated user by clearing the JWT token stored in the database.\n\n**Authentication:** Required (`Bearer Token`).\n\n**Responses:**\n*   `200 OK`: User logged out successfully.\n*   `401 Unauthorized`/`403 Forbidden`: Invalid or missing token.\n*   `500 Internal Server Error`: Database error."
          },
          "response": [
            {
              "name": "Success - Logged Out",
              "originalRequest": {
                "method": "POST",
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}",
                    "type": "text"
                  }
                ],
                "url": {
                  "raw": "{{base_url}}/auth/logout",
                  "host": ["{{base_url}}"],
                  "path": ["auth", "logout"]
                }
              },
              "status": "OK",
              "code": 200,
              "_postman_previewlanguage": "json",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "cookie": [],
              "body": "{\n    \"message\": \"User logged out successfully!\"\n}"
            }
          ]
        },
        {
          "name": "Health Check",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/auth/hc",
              "host": ["{{base_url}}"],
              "path": ["auth", "hc"]
            },
            "description": "A simple health check endpoint to verify the server is running."
          },
          "response": [
            {
              "name": "Success - Server Running",
              "originalRequest": {
                "method": "GET",
                "header": [],
                "url": {
                  "raw": "{{base_url}}/auth/hc",
                  "host": ["{{base_url}}"],
                  "path": ["auth", "hc"]
                }
              },
              "status": "OK",
              "code": 200,
              "_postman_previewlanguage": "json",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "cookie": [],
              "body": "{\n    \"message\": \"Hello Health Checkers!\"\n}"
            }
          ]
        }
      ]
    },
    {
      "name": "Accounts",
      "description": "Endpoints for managing user financial accounts (e.g., bank accounts, cash). Includes CRUD, sharing, import/export, and analytics.",
      "item": [
        {
          "name": "Get All Accounts",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{auth_token}}",
                "type": "text",
                "description": "JWT token obtained from login."
              }
            ],
            "url": {
              "raw": "{{base_url}}/accounts?page=1&limit=5&search=Bank&sortBy=balance&sortOrder=desc",
              "host": ["{{base_url}}"],
              "path": ["accounts"],
              "query": [
                {
                  "key": "page",
                  "value": "1",
                  "description": "(Optional) Integer: The page number to retrieve (default: 1)."
                },
                {
                  "key": "limit",
                  "value": "5",
                  "description": "(Optional) Integer: The number of accounts per page (default: 10)."
                },
                {
                  "key": "search",
                  "value": "Bank",
                  "description": "(Optional) String: Search term to filter accounts by name or balance (case-insensitive for name).",
                  "disabled": true
                },
                {
                  "key": "sortBy",
                  "value": "balance",
                  "description": "(Optional) String: Field to sort by. Allowed values: `id`, `name`, `balance`, `createdAt` (default: `createdAt`)."
                },
                {
                  "key": "sortOrder",
                  "value": "desc",
                  "description": "(Optional) String: Sort order. Allowed values: `asc`, `desc` (default: `desc`)."
                }
              ]
            },
            "description": "Retrieves a list of financial accounts owned by the authenticated user. Includes associated analytics and owner details.\nSupports pagination, searching (by name or balance), and sorting.\n\n**Authentication:** Required (`Bearer Token`).\n\n**Responses:**\n*   `200 OK`: Returns a list of accounts and pagination info.\n*   `401 Unauthorized`/`403 Forbidden`: Invalid or missing token.\n*   `500 Internal Server Error`: Database error."
          },
          "response": [
            {
              "name": "Success - Accounts List",
              "originalRequest": {
                "method": "GET",
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}",
                    "type": "text"
                  }
                ],
                "url": {
                  "raw": "{{base_url}}/accounts?page=1&limit=5",
                  "host": ["{{base_url}}"],
                  "path": ["accounts"],
                  "query": [
                    {
                      "key": "page",
                      "value": "1"
                    },
                    {
                      "key": "limit",
                      "value": "5"
                    }
                  ]
                }
              },
              "status": "OK",
              "code": 200,
              "_postman_previewlanguage": "json",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "cookie": [],
              "body": "{\n    \"accounts\": [\n        {\n            \"id\": \"01fgy5q3-p8n7-m6l5-k4j3-h2g1f0e9d8c7\",\n            \"name\": \"Main Checking Account\",\n            \"balance\": 1500.75,\n            \"createdAt\": \"2024-07-01T10:00:00.000Z\",\n            \"analytics\": {\n                \"income\": 5000.00,\n                \"expense\": 3499.25,\n                \"incomePercentageChange\": 10.5,\n                \"expensesPercentageChange\": 15.2\n            },\n            \"owner\": {\n                \"id\": \"01exdcba-f100-7000-8f61-daac05c5c78e\",\n                \"name\": \"Test User\",\n                \"email\": \"test@example.com\",\n                \"profilePic\": \"https://i.stack.imgur.com/l60Hf.png\"\n            },\n            \"currency\": \"USD\"\n        }\n    ],\n    \"pagination\": {\n        \"page\": 1,\n        \"limit\": 5,\n        \"total\": 12,\n        \"totalPages\": 3\n    }\n}"
            }
          ]
        },
        {
          "name": "Create Account",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{auth_token}}",
                "type": "text",
                "description": "JWT token obtained from login."
              },
              {
                "key": "Content-Type",
                "value": "application/json",
                "type": "text"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"name\": \"Savings Account\",\n    \"balance\": 500.00,\n    \"currency\": \"USD\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{base_url}}/accounts",
              "host": ["{{base_url}}"],
              "path": ["accounts"]
            },
            "description": "Creates a new financial account for the authenticated user.\n\n**Process:**\n1.  Checks if an account with the same name already exists for the user.\n2.  Creates the `Account` record.\n3.  Creates a corresponding `Analytics` record.\n4.  Finds or creates an 'Opening Balance' `Category`.\n5.  Creates an initial `Transaction` representing the opening balance.\n\n**Authentication:** Required (`Bearer Token`).\n\n**Body (JSON):**\n*   `name` (string, required): Name for the new account (1-64 characters, unique for the user).\n*   `balance` (number, required): Initial balance (must be >= 0).\n*   `currency` (string, required): 3-letter currency code (e.g., 'USD', 'EUR').\n\n**Responses:**\n*   `201 Created`: Account created successfully, returns the new account object.\n*   `400 Bad Request`: Validation failed (name, balance, currency).\n*   `401 Unauthorized`/`403 Forbidden`: Invalid or missing token.\n*   `409 Conflict`: Account with the same name already exists for the user.\n*   `500 Internal Server Error`: Database error during account, analytics, or transaction creation."
          },
          "response": [
            {
              "name": "Success - Account Created",
              "originalRequest": {
                "method": "POST",
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}",
                    "type": "text"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"name\": \"Savings Account\",\n    \"balance\": 500.00,\n    \"currency\": \"USD\"\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{base_url}}/accounts",
                  "host": ["{{base_url}}"],
                  "path": ["accounts"]
                }
              },
              "status": "Created",
              "code": 201,
              "_postman_previewlanguage": "json",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "cookie": [],
              "body": "{\n    \"message\": \"Account created successfully\",\n    \"data\": {\n        \"id\": \"01h3d7k9-q1w2-e3r4-t5y6-u7i8o9p0a1s2\",\n        \"createdAt\": \"2024-07-21T11:00:00.456Z\",\n        \"updatedAt\": null,\n        \"name\": \"Savings Account\",\n        \"owner\": \"01exdcba-f100-7000-8f61-daac05c5c78e\",\n        \"balance\": 500.00,\n        \"currency\": \"USD\",\n        \"isDefault\": false\n    }\n}"
            }
          ]
        },
        {
          "name": "Get Account Details",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{auth_token}}",
                "type": "text",
                "description": "JWT token obtained from login."
              }
            ],
            "url": {
              "raw": "{{base_url}}/accounts/:accountId",
              "host": ["{{base_url}}"],
              "path": ["accounts", ":accountId"],
              "variable": [
                {
                  "key": "accountId",
                  "value": "01fgy5q3-p8n7-m6l5-k4j3-h2g1f0e9d8c7",
                  "description": "(Required) The UUID of the account to retrieve."
                }
              ]
            },
            "description": "Retrieves details for a specific financial account, including associated analytics and owner information.\nUser must own the account or have it shared with them.\n\n**Authentication:** Required (`Bearer Token`).\n\n**Path Variable:**\n*   `accountId` (UUID, required): The ID of the account to fetch.\n\n**Responses:**\n*   `200 OK`: Returns the account details.\n*   `401 Unauthorized`/`403 Forbidden`: Invalid or missing token or no access to the account.\n*   `404 Not Found`: Account with the given ID not found.\n*   `500 Internal Server Error`: Database error."
          },
          "response": [
            {
              "name": "Success - Account Details",
              "originalRequest": {
                "method": "GET",
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}",
                    "type": "text"
                  }
                ],
                "url": {
                  "raw": "{{base_url}}/accounts/01fgy5q3-p8n7-m6l5-k4j3-h2g1f0e9d8c7",
                  "host": ["{{base_url}}"],
                  "path": ["accounts", "01fgy5q3-p8n7-m6l5-k4j3-h2g1f0e9d8c7"]
                }
              },
              "status": "OK",
              "code": 200,
              "_postman_previewlanguage": "json",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "cookie": [],
              "body": "{\n    \"id\": \"01fgy5q3-p8n7-m6l5-k4j3-h2g1f0e9d8c7\",\n    \"name\": \"Main Checking (Updated)\",\n    \"balance\": 1650.00,\n    \"createdAt\": \"2024-07-01T10:00:00.000Z\",\n    \"updatedAt\": \"2024-07-21T11:10:00.000Z\",\n    \"owner\": {\n        \"id\": \"01exdcba-f100-7000-8f61-daac05c5c78e\",\n        \"name\": \"Test User Updated Again\",\n        \"email\": \"test@gmail.com\",\n        \"profilePic\": \"data:image/webp;base64,\"\n    },\n    \"analytics\": {\n        \"income\": 5000.00,\n        \"expense\": 3350.00,\n        \"balance\": 1650.00,\n        \"incomePercentageChange\": 8.75,\n        \"expensesPercentageChange\": -10.50\n    },\n    \"currency\": \"USD\"\n}"
            },
            {
              "name": "Error - Not Found",
              "originalRequest": {
                "method": "GET",
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}",
                    "type": "text"
                  }
                ],
                "url": {
                  "raw": "{{base_url}}/accounts/invalid-account-id",
                  "host": ["{{base_url}}"],
                  "path": ["accounts", "invalid-account-id"]
                }
              },
              "status": "Not Found",
              "code": 404,
              "_postman_previewlanguage": "json",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "cookie": [],
              "body": "{\n    \"message\": \"Account not found or access denied.\",\n    \"status\": 404\n}"
            }
          ]
        },
        {
          "name": "Update Account",
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{auth_token}}",
                "type": "text",
                "description": "JWT token obtained from login."
              },
              {
                "key": "Content-Type",
                "value": "application/json",
                "type": "text"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"name\": \"Main Checking (Final Name)\",\n    \"balance\": 1650.00,\n    \"currency\": \"USD\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{base_url}}/accounts/:accountId",
              "host": ["{{base_url}}"],
              "path": ["accounts", ":accountId"],
              "variable": [
                {
                  "key": "accountId",
                  "value": "01fgy5q3-p8n7-m6l5-k4j3-h2g1f0e9d8c7",
                  "description": "(Required) The UUID of the account to update."
                }
              ]
            },
            "description": "Updates the details of an existing financial account owned by the authenticated user. \n**Note:** Only the account `name` can be updated via this endpoint. Balance and currency are updated via transactions or potentially other specialized endpoints.\n\n**Authentication:** Required (`Bearer Token`).\n\n**Path Variable:**\n*   `accountId` (UUID, required): The ID of the account to update.\n\n**Body (JSON):**\n*   `name` (string, optional): New name for the account (1-64 chars, unique for the user).\n*   `balance` (number, optional): **Ignored.** Use transactions to update balance.\n*   `currency` (string, optional): **Ignored.** Currency is set at creation.\n\n**Responses:**\n*   `200 OK`: Account updated successfully.\n*   `400 Bad Request`: Validation failed (name) or no changes provided.\n*   `401 Unauthorized`/`403 Forbidden`: Invalid or missing token, or attempting to update an account not owned by the user.\n*   `404 Not Found`: Account with the given ID not found.\n*   `409 Conflict`: Another account with the new name already exists.\n*   `500 Internal Server Error`: Database error during transaction."
          },
          "response": [
            {
              "name": "Success - Account Updated",
              "originalRequest": {
                "method": "PUT",
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}",
                    "type": "text"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"name\": \"Main Checking (Final Name)\"\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{base_url}}/accounts/01fgy5q3-p8n7-m6l5-k4j3-h2g1f0e9d8c7",
                  "host": ["{{base_url}}"],
                  "path": ["accounts", "01fgy5q3-p8n7-m6l5-k4j3-h2g1f0e9d8c7"]
                }
              },
              "status": "OK",
              "code": 200,
              "_postman_previewlanguage": "json",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "cookie": [],
              "body": "{\n    \"message\": \"Account updated successfully\"\n}"
            }
          ]
        },
        {
          "name": "Delete Account",
          "request": {
            "method": "DELETE",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{auth_token}}",
                "type": "text",
                "description": "JWT token obtained from login."
              }
            ],
            "url": {
              "raw": "{{base_url}}/accounts/:accountId",
              "host": ["{{base_url}}"],
              "path": ["accounts", ":accountId"],
              "variable": [
                {
                  "key": "accountId",
                  "value": "01h3d7k9-q1w2-e3r4-t5y6-u7i8o9p0a1s2",
                  "description": "(Required) The UUID of the account to delete."
                }
              ]
            },
            "description": "**DANGER ZONE:** Deletes a financial account owned by the authenticated user. This action is **irreversible** and performs the following within a database transaction:\n1.  Deletes all `Transaction` records associated with the account.\n2.  Deletes the `Analytics` record associated with the account.\n3.  Deletes any `UserAccount` sharing records.\n4.  Deletes any `Debts` records associated with the account.\n5.  Deletes any `ImportData` records associated with the account.\n6.  Deletes the `Account` record itself.\n\n**Authentication:** Required (`Bearer Token`).\n\n**Path Variable:**\n*   `accountId` (UUID, required): The ID of the account to delete.\n\n**Responses:**\n*   `200 OK`: Account and associated data deleted successfully.\n*   `401 Unauthorized`/`403 Forbidden`: Invalid or missing token, or attempting to delete an account not owned by the user.\n*   `404 Not Found`: Account with the given ID not found.\n*   `500 Internal Server Error`: Database error during transaction."
          },
          "response": [
            {
              "name": "Success - Account Deleted",
              "originalRequest": {
                "method": "DELETE",
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}",
                    "type": "text"
                  }
                ],
                "url": {
                  "raw": "{{base_url}}/accounts/01h3d7k9-q1w2-e3r4-t5y6-u7i8o9p0a1s2",
                  "host": ["{{base_url}}"],
                  "path": ["accounts", "01h3d7k9-q1w2-e3r4-t5y6-u7i8o9p0a1s2"]
                }
              },
              "status": "OK",
              "code": 200,
              "_postman_previewlanguage": "json",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "cookie": [],
              "body": "{\n    \"message\": \"Account and related data deleted successfully\"\n}"
            }
          ]
        },
        {
          "name": "Get Accounts List (for Dropdown)",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{auth_token}}",
                "type": "text",
                "description": "JWT token obtained from login."
              }
            ],
            "url": {
              "raw": "{{base_url}}/accounts/list",
              "host": ["{{base_url}}"],
              "path": ["accounts", "list"]
            },
            "description": "Retrieves a minimal list of accounts (ID, name, currency) owned by the authenticated user. Designed for populating dropdown menus or selection lists where pagination is not needed.\n\n**Authentication:** Required (`Bearer Token`).\n\n**Responses:**\n*   `200 OK`: Returns an array of account objects.\n*   `401 Unauthorized`/`403 Forbidden`: Invalid or missing token.\n*   `500 Internal Server Error`: Database error."
          },
          "response": [
            {
              "name": "Success - Accounts List for Dropdown",
              "originalRequest": {
                "method": "GET",
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}",
                    "type": "text"
                  }
                ],
                "url": {
                  "raw": "{{base_url}}/accounts/list",
                  "host": ["{{base_url}}"],
                  "path": ["accounts", "list"]
                }
              },
              "status": "OK",
              "code": 200,
              "_postman_previewlanguage": "json",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "cookie": [],
              "body": "[\n    {\n        \"id\": \"01fgy5q3-p8n7-m6l5-k4j3-h2g1f0e9d8c7\",\n        \"name\": \"Main Checking Account\",\n        \"currency\": \"USD\"\n    },\n    {\n        \"id\": \"01h3d7k9-q1w2-e3r4-t5y6-u7i8o9p0a1s2\",\n        \"name\": \"Savings Account\",\n        \"currency\": \"USD\"\n    },\n    {\n        \"id\": \"01f0z7v5-a1b2-c3d4-e5f6-789012345678\",\n        \"name\": \"Cash Wallet\",\n        \"currency\": \"INR\"\n    }\n]"
            }
          ]
        },
        {
          "name": "Get Dashboard Summary",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{auth_token}}",
                "type": "text",
                "description": "JWT token obtained from login."
              }
            ],
            "url": {
              "raw": "{{base_url}}/accounts/dashboard",
              "host": ["{{base_url}}"],
              "path": ["accounts", "dashboard"]
            },
            "description": "Retrieves aggregated data for the user's dashboard, summarizing financial activity across all owned accounts.\n\n**Includes:**\n*   Basic info for each account (name, balance, total income/expense).\n*   Total transaction count per account.\n*   Overall transaction count.\n*   Min/Max income and expense values across all transactions.\n*   Chart data (time series) for overall income, expense, and balance.\n*   Overall income, expense, balance totals.\n*   Overall average percentage change for income and expenses.\n\n**Authentication:** Required (`Bearer Token`).\n\n**Responses:**\n*   `200 OK`: Returns the dashboard summary data.\n*   `401 Unauthorized`/`403 Forbidden`: Invalid or missing token.\n*   `500 Internal Server Error`: Database error during aggregation."
          },
          "response": [
            {
              "name": "Success - Dashboard Data",
              "originalRequest": {
                "method": "GET",
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}",
                    "type": "text"
                  }
                ],
                "url": {
                  "raw": "{{base_url}}/accounts/dashboard",
                  "host": ["{{base_url}}"],
                  "path": ["accounts", "dashboard"]
                }
              },
              "status": "OK",
              "code": 200,
              "_postman_previewlanguage": "json",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "cookie": [],
              "body": "{\n    \"accountsInfo\": [\n        {\n            \"id\": \"01fgy5q3-p8n7-m6l5-k4j3-h2g1f0e9d8c7\",\n            \"name\": \"Main Checking Account\",\n            \"balance\": 1650.00,\n            \"income\": 5000.00,\n            \"expense\": 3350.00,\n            \"currency\": \"USD\"\n        },\n        {\n            \"id\": \"01h3d7k9-q1w2-e3r4-t5y6-u7i8o9p0a1s2\",\n            \"name\": \"Savings Account\",\n            \"balance\": 500.00,\n            \"income\": 500.00,\n            \"expense\": 0,\n            \"currency\": \"USD\"\n        }\n    ],\n    \"transactionsCountByAccount\": {\n        \"Main Checking Account\": 55,\n        \"Savings Account\": 1\n    },\n    \"totalTransaction\": 56,\n    \"mostExpensiveExpense\": 450.00,\n    \"cheapestExpense\": 5.99,\n    \"mostExpensiveIncome\": 2500.00,\n    \"cheapestIncome\": 50.00,\n    \"incomeChartData\": [\n        {\"x\": 1672531200, \"y\": 2500},\n        {\"x\": 1675209600, \"y\": 1500}\n    ],\n    \"expenseChartData\": [\n        {\"x\": 1672531200, \"y\": 800},\n        {\"x\": 1675209600, \"y\": 1200}\n    ],\n    \"balanceChartData\": [\n        {\"x\": 1672531200, \"y\": 1700},\n        {\"x\": 1675209600, \"y\": 300}\n    ],\n    \"overallIncome\": 5500.00,\n    \"overallExpense\": 3350.00,\n    \"overallBalance\": 2150.00,\n    \"overallIncomeChange\": 8.75,\n    \"overallExpenseChange\": 12.10\n}"
            }
          ]
        },
        {
          "name": "Search Transactions Globally",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{auth_token}}",
                "type": "text",
                "description": "JWT token obtained from login."
              }
            ],
            "url": {
              "raw": "{{base_url}}/accounts/searchTerm?q=Coffee",
              "host": ["{{base_url}}"],
              "path": ["accounts", "searchTerm"],
              "query": [
                {
                  "key": "q",
                  "value": "Coffee",
                  "description": "(Required) String or Number: The search term. Searches across transaction `text`, `transfer`, `category.name`, and `amount` fields for all transactions owned by the user. Limit 20 results."
                }
              ]
            },
            "description": "Performs a global search across all transactions owned by the authenticated user.\n\n**Search Fields:**\n*   `text` (case-insensitive like)\n*   `transfer` (case-insensitive like)\n*   `category.name` (case-insensitive like)\n*   `amount` (exact match if `q` is a number)\n\nReturns a maximum of 20 matching transactions, ordered by creation date descending.\n\n**Authentication:** Required (`Bearer Token`).\n\n**Responses:**\n*   `200 OK`: Returns an array of matching transactions (or an empty array).\n*   `400 Bad Request`: Search term `q` is missing.\n*   `401 Unauthorized`/`403 Forbidden`: Invalid or missing token.\n*   `500 Internal Server Error`: Database error."
          },
          "response": [
            {
              "name": "Success - Search Results",
              "originalRequest": {
                "method": "GET",
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}",
                    "type": "text"
                  }
                ],
                "url": {
                  "raw": "{{base_url}}/accounts/searchTerm?q=Coffee",
                  "host": ["{{base_url}}"],
                  "path": ["accounts", "searchTerm"],
                  "query": [
                    {
                      "key": "q",
                      "value": "Coffee"
                    }
                  ]
                }
              },
              "status": "OK",
              "code": 200,
              "_postman_previewlanguage": "json",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "cookie": [],
              "body": "[\n    {\n        \"id\": \"01h3d8a1-x1y2-z3a4-b5c6-d7e8f9g0h1i2\",\n        \"createdAt\": \"2024-07-19T09:15:00.000Z\",\n        \"updatedAt\": null,\n        \"text\": \"Morning Coffee\",\n        \"amount\": 4.50,\n        \"isIncome\": false,\n        \"transfer\": \"Starbucks\",\n        \"account\": \"01fgy5q3-p8n7-m6l5-k4j3-h2g1f0e9d8c7\",\n        \"categoryName\": \"Eating Out\"\n    },\n    {\n        \"id\": \"01h3d8b2-y2z3-a4b5-c6d7-e8f9g0h1i2j3\",\n        \"createdAt\": \"2024-07-15T14:30:00.000Z\",\n        \"updatedAt\": null,\n        \"text\": \"Coffee beans\",\n        \"amount\": 12.99,\n        \"isIncome\": false,\n        \"transfer\": \"Grocery Store\",\n        \"account\": \"01fgy5q3-p8n7-m6l5-k4j3-h2g1f0e9d8c7\",\n        \"categoryName\": \"Groceries\"\n    }\n]"
            }
          ]
        },
        {
          "name": "Get Users for Sharing (Dropdown)",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{auth_token}}",
                "type": "text",
                "description": "JWT token obtained from login."
              }
            ],
            "url": {
              "raw": "{{base_url}}/accounts/dropdown/user",
              "host": ["{{base_url}}"],
              "path": ["accounts", "dropdown", "user"]
            },
            "description": "Retrieves a list of other users (excluding the currently authenticated user) suitable for sharing accounts with. Returns minimal user information.\n\n**Authentication:** Required (`Bearer Token`).\n\n**Responses:**\n*   `200 OK`: Returns an array of user objects (`id`, `name`, `email`, `profilePic`).\n*   `401 Unauthorized`/`403 Forbidden`: Invalid or missing token.\n*   `500 Internal Server Error`: Database error."
          },
          "response": [
            {
              "name": "Success - User List for Sharing",
              "originalRequest": {
                "method": "GET",
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}",
                    "type": "text"
                  }
                ],
                "url": {
                  "raw": "{{base_url}}/accounts/dropdown/user",
                  "host": ["{{base_url}}"],
                  "path": ["accounts", "dropdown", "user"]
                }
              },
              "status": "OK",
              "code": 200,
              "_postman_previewlanguage": "json",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "cookie": [],
              "body": "[\n    {\n        \"id\": \"01gabcde-fgh1-ijk2-lmn3-opq4rst5uvw6\",\n        \"name\": \"Alice Smith\",\n        \"email\": \"alice@example.com\",\n        \"profilePic\": \"https://i.stack.imgur.com/l60Hf.png\"\n    },\n    {\n        \"id\": \"01hzyxwvu-tsr1-qpo2-nml3-kji4hgf5edc4\",\n        \"name\": \"Bob Johnson\",\n        \"email\": \"bob@example.com\",\n        \"profilePic\": \"https://i.stack.imgur.com/l60Hf.png\"\n    }\n]"
            }
          ]
        },
        {
          "name": "Share Account",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{auth_token}}",
                "type": "text",
                "description": "JWT token obtained from login."
              },
              {
                "key": "Content-Type",
                "value": "application/json",
                "type": "text"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"accountId\": \"01fgy5q3-p8n7-m6l5-k4j3-h2g1f0e9d8c7\",\n    \"userId\": \"01gabcde-fgh1-ijk2-lmn3-opq4rst5uvw6\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{base_url}}/accounts/share",
              "host": ["{{base_url}}"],
              "path": ["accounts", "share"]
            },
            "description": "Shares an account owned by the authenticated user with another specified user.\n\n**Process:**\n1.  Validates that the account and target user exist.\n2.  Checks that the target user is not the owner and is not already shared with the account.\n3.  Creates a `UserAccount` record linking the user and account.\n4.  Sends an email notification to the target user.\n\n**Authentication:** Required (`Bearer Token`).\n\n**Body (JSON):**\n*   `accountId` (UUID, required): The ID of the account to share.\n*   `userId` (UUID, required): The ID of the user to share the account with.\n\n**Responses:**\n*   `200 OK`: Account shared successfully.\n*   `400 Bad Request`: Missing IDs, account/user not found, user already shared, trying to share with self.\n*   `401 Unauthorized`/`403 Forbidden`: Invalid or missing token (or potentially if trying to share an account not owned by the authenticated user).\n*   `409 Conflict`: Account already shared with this user.\n*   `500 Internal Server Error`: Database or email sending error."
          },
          "response": [
            {
              "name": "Success - Account Shared",
              "originalRequest": {
                "method": "POST",
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}",
                    "type": "text"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"accountId\": \"01fgy5q3-p8n7-m6l5-k4j3-h2g1f0e9d8c7\",\n    \"userId\": \"01gabcde-fgh1-ijk2-lmn3-opq4rst5uvw6\"\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{base_url}}/accounts/share",
                  "host": ["{{base_url}}"],
                  "path": ["accounts", "share"]
                }
              },
              "status": "OK",
              "code": 200,
              "_postman_previewlanguage": "json",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "cookie": [],
              "body": "{\n    \"message\": \"Account shared successfully\"\n}"
            },
            {
              "name": "Error - Already Shared",
              "originalRequest": {
                "method": "POST",
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}",
                    "type": "text"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"accountId\": \"01fgy5q3-p8n7-m6l5-k4j3-h2g1f0e9d8c7\",\n    \"userId\": \"01gabcde-fgh1-ijk2-lmn3-opq4rst5uvw6\"\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{base_url}}/accounts/share",
                  "host": ["{{base_url}}"],
                  "path": ["accounts", "share"]
                }
              },
              "status": "Conflict",
              "code": 409,
              "_postman_previewlanguage": "json",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "cookie": [],
              "body": "{\n    \"message\": \"Account already shared with this user\",\n    \"status\": 409\n}"
            }
          ]
        },
        {
          "name": "Revoke Account Share",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{auth_token}}",
                "type": "text",
                "description": "JWT token obtained from login."
              },
              {
                "key": "Content-Type",
                "value": "application/json",
                "type": "text"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"accountId\": \"01fgy5q3-p8n7-m6l5-k4j3-h2g1f0e9d8c7\",\n    \"userId\": \"01gabcde-fgh1-ijk2-lmn3-opq4rst5uvw6\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{base_url}}/accounts/revoke-share",
              "host": ["{{base_url}}"],
              "path": ["accounts", "revoke-share"]
            },
            "description": "Removes access for a specified user from an account owned by the authenticated user.\n\n**Authentication:** Required (`Bearer Token`).\n\n**Body (JSON):**\n*   `accountId` (UUID, required): The ID of the account to revoke access from.\n*   `userId` (UUID, required): The ID of the user whose access should be revoked.\n\n**Responses:**\n*   `200 OK`: Access revoked successfully.\n*   `403 Forbidden`: Authenticated user does not own the specified account.\n*   `404 Not Found`: Account or target user not found.\n*   `401 Unauthorized`: Invalid or missing token.\n*   `500 Internal Server Error`: Database error."
          },
          "response": [
            {
              "name": "Success - Share Revoked",
              "originalRequest": {},
              "status": "OK",
              "code": 200,
              "_postman_previewlanguage": "json",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "cookie": [],
              "body": "{\n    \"message\": \"Access revoked successfully\"\n}"
            }
          ]
        },
        {
          "name": "Get Accounts Shared With Me",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{auth_token}}",
                "type": "text",
                "description": "JWT token obtained from login."
              }
            ],
            "url": {
              "raw": "{{base_url}}/accounts/get-shares?page=1&limit=10&search=&sortBy=createdAt&sortOrder=desc",
              "host": ["{{base_url}}"],
              "path": ["accounts", "get-shares"],
              "query": [
                {
                  "key": "page",
                  "value": "1",
                  "description": "(Optional) Integer: Page number (default: 1)."
                },
                {
                  "key": "limit",
                  "value": "10",
                  "description": "(Optional) Integer: Items per page (default: 10)."
                },
                {
                  "key": "search",
                  "value": "",
                  "description": "(Optional) String: Search by account name."
                },
                {
                  "key": "sortBy",
                  "value": "createdAt",
                  "description": "(Optional) String: Field to sort by ('name', 'balance', 'createdAt', 'ownerName'). Default: 'createdAt'."
                },
                {
                  "key": "sortOrder",
                  "value": "desc",
                  "description": "(Optional) String: Sort order ('asc', 'desc'). Default: 'desc'."
                }
              ]
            },
            "description": "Retrieves a list of accounts that have been shared *with* the currently authenticated user by other users. Includes pagination, search, and sorting.\n\n**Authentication:** Required (`Bearer Token`).\n\n**Responses:**\n*   `200 OK`: Returns a list of shared accounts and pagination details.\n*   `400 Bad Request`: If no accounts are shared with the user (this depends on how the backend handles empty results).\n*   `401 Unauthorized`/`403 Forbidden`: Invalid or missing token.\n*   `500 Internal Server Error`: Database error."
          },
          "response": [
            {
              "name": "Success - Shared Accounts List",
              "originalRequest": {
                "method": "GET",
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}",
                    "type": "text"
                  }
                ],
                "url": {
                  "raw": "{{base_url}}/accounts/get-shares?page=1&limit=10",
                  "host": ["{{base_url}}"],
                  "path": ["accounts", "get-shares"],
                  "query": [
                    {
                      "key": "page",
                      "value": "1"
                    },
                    {
                      "key": "limit",
                      "value": "10"
                    }
                  ]
                }
              },
              "status": "OK",
              "code": 200,
              "_postman_previewlanguage": "json",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "cookie": [],
              "body": "{\n    \"data\": [\n        {\n            \"id\": \"01zxcvbn-m1a2s3d4f5g6h7j8k9l0\",\n            \"name\": \"Alice's Shared Project Fund\",\n            \"balance\": 875.00,\n            \"createdAt\": \"2024-07-10T14:00:00.000Z\",\n            \"currency\": \"USD\",\n            \"owner\": {\n                \"id\": \"01gabcde-fgh1-ijk2-lmn3-opq4rst5uvw6\",\n                \"name\": \"Alice Smith\",\n                \"email\": \"alice@example.com\",\n                \"profilePic\": \"https://i.stack.imgur.com/l60Hf.png\"\n            }\n        }\n    ],\n    \"pagination\": {\n        \"page\": 1,\n        \"limit\": 10,\n        \"total\": 1,\n        \"totalPages\": 1\n    }\n}"
            }
          ]
        },
        {
          "name": "Get Users Shared With Account",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{auth_token}}",
                "type": "text",
                "description": "JWT token obtained from login."
              }
            ],
            "url": {
              "raw": "{{base_url}}/accounts/previous/share/:accountId",
              "host": ["{{base_url}}"],
              "path": ["accounts", "previous", "share", ":accountId"],
              "variable": [
                {
                  "key": "accountId",
                  "value": "01fgy5q3-p8n7-m6l5-k4j3-h2g1f0e9d8c7",
                  "description": "(Required) The UUID of the account to check shares for."
                }
              ]
            },
            "description": "Retrieves a list of users with whom a *specific* account (owned by the authenticated user) has been previously shared.\n\n**Authentication:** Required (`Bearer Token`).\n\n**Path Variable:**\n*   `accountId` (UUID, required): The ID of the account to check.\n\n**Responses:**\n*   `200 OK`: Returns an array of user objects who have access to this account.\n*   `401 Unauthorized`/`403 Forbidden`: Invalid or missing token (or if the account is not owned by the authenticated user).\n*   `404 Not Found`: Account not found.\n*   `500 Internal Server Error`: Database error."
          },
          "response": [
            {
              "name": "Success - Users Shared With Account",
              "originalRequest": {
                "method": "GET",
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}",
                    "type": "text"
                  }
                ],
                "url": {
                  "raw": "{{base_url}}/accounts/previous/share/01fgy5q3-p8n7-m6l5-k4j3-h2g1f0e9d8c7",
                  "host": ["{{base_url}}"],
                  "path": [
                    "accounts",
                    "previous",
                    "share",
                    "01fgy5q3-p8n7-m6l5-k4j3-h2g1f0e9d8c7"
                  ]
                }
              },
              "status": "OK",
              "code": 200,
              "_postman_previewlanguage": "json",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "cookie": [],
              "body": "[\n    {\n        \"user\": {\n            \"id\": \"01gabcde-fgh1-ijk2-lmn3-opq4rst5uvw6\",\n            \"name\": \"Alice Smith\",\n            \"email\": \"alice@example.com\",\n            \"profilePic\": \"https://i.stack.imgur.com/l60Hf.png\"\n        }\n    }\n]"
            }
          ]
        },
        {
          "name": "Import Transactions",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{auth_token}}",
                "type": "text",
                "description": "JWT token obtained from login."
              }
            ],
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "accountId",
                  "value": "01fgy5q3-p8n7-m6l5-k4j3-h2g1f0e9d8c7",
                  "type": "text",
                  "description": "(Required) UUID of the account to import transactions into."
                },
                {
                  "key": "document",
                  "type": "file",
                  "description": "(Required) The .xlsx file containing transaction data. Must have headers: `Text`, `Amount`, `Type` ('income' or 'expense'), `Transfer`, `Category`, `Date`."
                }
              ]
            },
            "url": {
              "raw": "{{base_url}}/accounts/import/transaction",
              "host": ["{{base_url}}"],
              "path": ["accounts", "import", "transaction"]
            },
            "description": "Initiates the transaction import process from an XLSX file.\n\n**Process:**\n1.  Validates the account ID and file presence.\n2.  Reads the XLSX file.\n3.  Checks for required headers: `Text`, `Amount`, `Type`, `Transfer`, `Category`, `Date`.\n4.  Parses the data, mapping columns and creating new category IDs if necessary.\n5.  Stores the parsed data (including total records) in the `ImportData` table.\n6.  Returns an `importId` (successId) for confirmation.\n\n**Note:** This endpoint *stages* the import. Use `Confirm Import` to finalize it.\n\n**Authentication:** Required (`Bearer Token`).\n\n**Responses:**\n*   `200 OK`: Import staged successfully, returns `successId` and `totalRecords`.\n*   `400 Bad Request`: Missing fields, invalid account, invalid file format, missing headers.\n*   `401 Unauthorized`/`403 Forbidden`: Invalid or missing token.\n*   `500 Internal Server Error`: File reading or database error."
          },
          "response": [
            {
              "name": "Success - Import Staged",
              "originalRequest": {
                "method": "POST",
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}",
                    "type": "text"
                  }
                ],
                "body": {
                  "mode": "formdata",
                  "formdata": [
                    {
                      "key": "accountId",
                      "value": "01fgy5q3-p8n7-m6l5-k4j3-h2g1f0e9d8c7",
                      "type": "text"
                    },
                    {
                      "key": "document",
                      "type": "file",
                      "src": "/path/to/your/sample_transactions.xlsx"
                    }
                  ]
                },
                "url": {
                  "raw": "{{base_url}}/accounts/import/transaction",
                  "host": ["{{base_url}}"],
                  "path": ["accounts", "import", "transaction"]
                }
              },
              "status": "OK",
              "code": 200,
              "_postman_previewlanguage": "json",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "cookie": [],
              "body": "{\n    \"message\": \"Imported successfully\",\n    \"successId\": \"01h4a1b2-c3d4-e5f6-g7h8-i9j0k1l2m3n4\",\n    \"totalRecords\": 150\n}"
            }
          ]
        },
        {
          "name": "Download Import Sample File",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{auth_token}}",
                "type": "text",
                "description": "JWT token obtained from login."
              }
            ],
            "url": {
              "raw": "{{base_url}}/accounts/sampleFile/import",
              "host": ["{{base_url}}"],
              "path": ["accounts", "sampleFile", "import"]
            },
            "description": "Downloads a sample XLSX file (`sample_transactions.xlsx`) that shows the required format and headers for the transaction import feature.\n\n**Authentication:** Required (`Bearer Token`).\n\n**Responses:**\n*   `200 OK`: Returns the XLSX file.\n*   `400 Bad Request`/`404 Not Found`: Sample file is missing on the server.\n*   `401 Unauthorized`/`403 Forbidden`: Invalid or missing token.\n*   `500 Internal Server Error`: Error reading file."
          },
          "response": [
            {
              "name": "Success - File Download",
              "originalRequest": {
                "method": "GET",
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}",
                    "type": "text"
                  }
                ],
                "url": {
                  "raw": "{{base_url}}/accounts/sampleFile/import",
                  "host": ["{{base_url}}"],
                  "path": ["accounts", "sampleFile", "import"]
                }
              },
              "status": "OK",
              "code": 200,
              "_postman_previewlanguage": "text",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
                },
                {
                  "key": "Content-Disposition",
                  "value": "attachment; filename=sample_transactions.xlsx"
                }
              ],
              "cookie": [],
              "body": ""
            }
          ]
        },
        {
          "name": "Get Staged Import Data",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{auth_token}}",
                "type": "text",
                "description": "JWT token obtained from login."
              }
            ],
            "url": {
              "raw": "{{base_url}}/accounts/get/import/:importId",
              "host": ["{{base_url}}"],
              "path": ["accounts", "get", "import", ":importId"],
              "variable": [
                {
                  "key": "importId",
                  "value": "01h4a1b2-c3d4-e5f6-g7h8-i9j0k1l2m3n4",
                  "description": "(Required) The UUID of the staged import (obtained from the 'Import Transactions' endpoint)."
                }
              ]
            },
            "description": "Retrieves the parsed data from a staged import process, identified by the `importId`. Useful for previewing the data before confirming the import.\n\n**Authentication:** Required (`Bearer Token`).\n\n**Path Variable:**\n*   `importId` (UUID, required): The ID returned by the 'Import Transactions' endpoint.\n\n**Responses:**\n*   `200 OK`: Returns the parsed transaction data and the total number of records.\n*   `404 Not Found`: Import record with the given ID not found.\n*   `401 Unauthorized`/`403 Forbidden`: Invalid or missing token.\n*   `500 Internal Server Error`: Database error."
          },
          "response": [
            {
              "name": "Success - Staged Data Preview",
              "originalRequest": {
                "method": "GET",
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}",
                    "type": "text"
                  }
                ],
                "url": {
                  "raw": "{{base_url}}/accounts/get/import/01h4a1b2-c3d4-e5f6-g7h8-i9j0k1l2m3n4",
                  "host": ["{{base_url}}"],
                  "path": [
                    "accounts",
                    "get",
                    "import",
                    "01h4a1b2-c3d4-e5f6-g7h8-i9j0k1l2m3n4"
                  ]
                }
              },
              "status": "OK",
              "code": 200,
              "_postman_previewlanguage": "json",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "cookie": [],
              "body": "{\n    \"length\": 150,\n    \"data\": [\n        {\n            \"account\": \"01fgy5q3-p8n7-m6l5-k4j3-h2g1f0e9d8c7\",\n            \"owner\": \"01exdcba-f100-7000-8f61-daac05c5c78e\",\n            \"createdBy\": \"01exdcba-f100-7000-8f61-daac05c5c78e\",\n            \"updatedBy\": \"01exdcba-f100-7000-8f61-daac05c5c78e\",\n            \"text\": \"Imported Item 1\",\n            \"isIncome\": false,\n            \"createdAt\": \"2024-06-15T10:00:00.000Z\",\n            \"category\": \"01f0z7v5-a1b2-c3d4-e5f6-78901234567a\", \n            \"amount\": 55.20,\n            \"transfer\": \"SuperMart\"\n        }\n    ],\n    \"accountId\": \"01fgy5q3-p8n7-m6l5-k4j3-h2g1f0e9d8c7\",\n    \"totalRecords\": 150,\n    \"errorRecords\": 0,\n    \"isImported\": false,\n    \"createdAt\": \"2024-07-21T13:30:00.000Z\"\n}"
            }
          ]
        },
        {
          "name": "Confirm Import",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{auth_token}}",
                "type": "text",
                "description": "JWT token obtained from login."
              }
            ],
            "url": {
              "raw": "{{base_url}}/accounts/confirm/import/:importId",
              "host": ["{{base_url}}"],
              "path": ["accounts", "confirm", "import", ":importId"],
              "variable": [
                {
                  "key": "importId",
                  "value": "01h4a1b2-c3d4-e5f6-g7h8-i9j0k1l2m3n4",
                  "description": "(Required) The UUID of the staged import to confirm (obtained from 'Import Transactions')."
                }
              ]
            },
            "description": "Finalizes a staged transaction import process.\n\n**Process:**\n1.  Retrieves the staged data using `importId`.\n2.  Inserts all parsed transactions into the `Transaction` table in bulk.\n3.  Updates the `Analytics` and `Account` balance based on the imported transactions in bulk.\n4.  Marks the `ImportData` record as imported (`isImported = true`).\n\n**Authentication:** Required (`Bearer Token`).\n\n**Path Variable:**\n*   `importId` (UUID, required): The ID of the staged import to confirm.\n\n**Responses:**\n*   `200 OK`: Data imported successfully.\n*   `404 Not Found`: Staged import record with the given ID not found or already imported.\n*   `400 Bad Request`: Error during the bulk insert or analytics update transaction.\n*   `401 Unauthorized`/`403 Forbidden`: Invalid or missing token.\n*   `500 Internal Server Error`: Database error."
          },
          "response": [
            {
              "name": "Success - Import Confirmed",
              "originalRequest": {
                "method": "POST",
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}",
                    "type": "text"
                  }
                ],
                "url": {
                  "raw": "{{base_url}}/accounts/confirm/import/01h4a1b2-c3d4-e5f6-g7h8-i9j0k1l2m3n4",
                  "host": ["{{base_url}}"],
                  "path": [
                    "accounts",
                    "confirm",
                    "import",
                    "01h4a1b2-c3d4-e5f6-g7h8-i9j0k1l2m3n4"
                  ]
                }
              },
              "status": "OK",
              "code": 200,
              "_postman_previewlanguage": "json",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "cookie": [],
              "body": "{\n    \"message\": \"Data imported successfully\"\n}"
            }
          ]
        },
        {
          "name": "Get Custom Analytics for Account",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{auth_token}}",
                "type": "text",
                "description": "JWT token obtained from login."
              }
            ],
            "url": {
              "raw": "{{base_url}}/accounts/customAnalytics/:accountId?duration=thisMonth",
              "host": ["{{base_url}}"],
              "path": ["accounts", "customAnalytics", ":accountId"],
              "query": [
                {
                  "key": "duration",
                  "value": "thisMonth",
                  "description": "(Required) String: Time period for analytics. Options: 'today', 'thisWeek', 'thisMonth', 'thisYear', 'all', or a custom range 'YYYY-MM-DD,YYYY-MM-DD'."
                }
              ],
              "variable": [
                {
                  "key": "accountId",
                  "value": "01fgy5q3-p8n7-m6l5-k4j3-h2g1f0e9d8c7",
                  "description": "(Required) The UUID of the account to get analytics for."
                }
              ]
            },
            "description": "Calculates income, expense, balance, and percentage changes for a specific account over a given duration. The percentage changes compare the selected period to the immediately preceding equivalent period.\nUser must own or have access to the specified account.\n\n**Authentication:** Required (`Bearer Token`).\n\n**Path Variable:**\n*   `accountId` (UUID, required): ID of the account.\n\n**Query Parameter:**\n*   `duration` (string, required): Specifies the time frame.\n\n**Responses:**\n*   `200 OK`: Returns the calculated analytics data.\n*   `400 Bad Request`: Missing or invalid `accountId` or `duration`.\n*   `404 Not Found`: Account not found or access denied.\n*   `401 Unauthorized`/`403 Forbidden`: Invalid or missing token.\n*   `500 Internal Server Error`: Database error during calculation."
          },
          "response": [
            {
              "name": "Success - Custom Analytics",
              "originalRequest": {
                "method": "GET",
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}",
                    "type": "text"
                  }
                ],
                "url": {
                  "raw": "{{base_url}}/accounts/customAnalytics/01fgy5q3-p8n7-m6l5-k4j3-h2g1f0e9d8c7?duration=thisMonth",
                  "host": ["{{base_url}}"],
                  "path": [
                    "accounts",
                    "customAnalytics",
                    "01fgy5q3-p8n7-m6l5-k4j3-h2g1f0e9d8c7"
                  ],
                  "query": [
                    {
                      "key": "duration",
                      "value": "thisMonth"
                    }
                  ]
                }
              },
              "status": "OK",
              "code": 200,
              "_postman_previewlanguage": "json",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "cookie": [],
              "body": "{\n    \"income\": 1250.00,\n    \"expense\": 875.50,\n    \"balance\": 374.50,\n    \"BalancePercentageChange\": 15.67,\n    \"IncomePercentageChange\": 10.20,\n    \"ExpensePercentageChange\": -5.33\n}"
            }
          ]
        },
        {
          "name": "Generate Account Statement",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{auth_token}}",
                "type": "text",
                "description": "JWT token obtained from login."
              }
            ],
            "url": {
              "raw": "{{base_url}}/accounts/:accountId/statement?startDate=2024-01-01&endDate=2024-06-30&exportType=pdf",
              "host": ["{{base_url}}"],
              "path": ["accounts", ":accountId", "statement"],
              "query": [
                {
                  "key": "startDate",
                  "value": "2024-01-01",
                  "description": "(Optional) String (YYYY-MM-DD): Start date for the statement period. Required if `numTransactions` is not used."
                },
                {
                  "key": "endDate",
                  "value": "2024-06-30",
                  "description": "(Optional) String (YYYY-MM-DD): End date for the statement period. Required if `numTransactions` is not used."
                },
                {
                  "key": "numTransactions",
                  "value": "100",
                  "description": "(Optional) Integer: Number of most recent transactions to include (1-10000). Use instead of `startDate`/`endDate`.",
                  "disabled": true
                },
                {
                  "key": "exportType",
                  "value": "pdf",
                  "description": "(Required) String: Format of the statement. Allowed values: `pdf`, `xlsx`."
                }
              ],
              "variable": [
                {
                  "key": "accountId",
                  "value": "01fgy5q3-p8n7-m6l5-k4j3-h2g1f0e9d8c7",
                  "description": "(Required) The UUID of the account to generate the statement for."
                }
              ]
            },
            "description": "Generates an account statement in either PDF or XLSX format.\n\n**Data Included:**\n*   List of transactions within the specified date range OR the specified number of recent transactions.\n*   Summary analytics (total income, total expense, balance, percentage changes) for the included transactions.\n\n**Note:** Provide either (`startDate` and `endDate`) OR `numTransactions`.\n\n**Authentication:** Required (`Bearer Token`).\n\n**Responses:**\n*   `200 OK`: Returns the generated statement file (PDF or XLSX).\n*   `400 Bad Request`: Missing/invalid parameters (`accountId`, `exportType`, date/number criteria).\n*   `404 Not Found`: Account not found or no transactions found for the criteria.\n*   `401 Unauthorized`/`403 Forbidden`: Invalid or missing token.\n*   `500 Internal Server Error`: Error during data fetching, PDF generation (Puppeteer), or XLSX generation."
          },
          "response": [
            {
              "name": "Success - PDF Statement",
              "originalRequest": {
                "method": "GET",
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}",
                    "type": "text"
                  }
                ],
                "url": {
                  "raw": "{{base_url}}/accounts/01fgy5q3-p8n7-m6l5-k4j3-h2g1f0e9d8c7/statement?startDate=2024-01-01&endDate=2024-06-30&exportType=pdf",
                  "host": ["{{base_url}}"],
                  "path": [
                    "accounts",
                    "01fgy5q3-p8n7-m6l5-k4j3-h2g1f0e9d8c7",
                    "statement"
                  ],
                  "query": [
                    {
                      "key": "startDate",
                      "value": "2024-01-01"
                    },
                    {
                      "key": "endDate",
                      "value": "2024-06-30"
                    },
                    {
                      "key": "exportType",
                      "value": "pdf"
                    }
                  ]
                }
              },
              "status": "OK",
              "code": 200,
              "_postman_previewlanguage": "text",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/pdf"
                },
                {
                  "key": "Content-Disposition",
                  "value": "attachment; filename=statement.pdf"
                }
              ],
              "cookie": [],
              "body": ""
            },
            {
              "name": "Success - XLSX Statement",
              "originalRequest": {
                "method": "GET",
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}",
                    "type": "text"
                  }
                ],
                "url": {
                  "raw": "{{base_url}}/accounts/01fgy5q3-p8n7-m6l5-k4j3-h2g1f0e9d8c7/statement?numTransactions=50&exportType=xlsx",
                  "host": ["{{base_url}}"],
                  "path": [
                    "accounts",
                    "01fgy5q3-p8n7-m6l5-k4j3-h2g1f0e9d8c7",
                    "statement"
                  ],
                  "query": [
                    {
                      "key": "numTransactions",
                      "value": "50"
                    },
                    {
                      "key": "exportType",
                      "value": "xlsx"
                    }
                  ]
                }
              },
              "status": "OK",
              "code": 200,
              "_postman_previewlanguage": "text",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
                },
                {
                  "key": "Content-Disposition",
                  "value": "attachment; filename=statement.xlsx"
                }
              ],
              "cookie": [],
              "body": ""
            }
          ]
        }
      ]
    },
    {
      "name": "Transactions",
      "description": "Endpoints for managing individual financial transactions, including recurring transactions and analytics.",
      "item": [
        {
          "name": "Get Transactions",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{auth_token}}",
                "type": "text",
                "description": "JWT token obtained from login."
              }
            ],
            "url": {
              "raw": "{{base_url}}/transactions?accountId=01fgy5q3-p8n7-m6l5-k4j3-h2g1f0e9d8c7&duration=thisMonth&page=1&pageSize=10&q=Groceries&isIncome=false&categoryId=01f0z7v5-a1b2-c3d4-e5f6-78901234567a&sortBy=amount&sortOrder=desc&minAmount=10&maxAmount=100",
              "host": ["{{base_url}}"],
              "path": ["transactions"],
              "query": [
                {
                  "key": "accountId",
                  "value": "01fgy5q3-p8n7-m6l5-k4j3-h2g1f0e9d8c7",
                  "description": "(Optional) String (UUID): Filter transactions by a specific account ID. If omitted, returns transactions for all accounts owned by the user."
                },
                {
                  "key": "duration",
                  "value": "thisMonth",
                  "description": "(Optional) String: Filter by time period. Options: 'today', 'thisWeek', 'thisMonth', 'thisYear', 'all', or custom 'YYYY-MM-DD,YYYY-MM-DD'.",
                  "disabled": false
                },
                {
                  "key": "page",
                  "value": "1",
                  "description": "(Optional) Integer: Page number for pagination (default: 1)."
                },
                {
                  "key": "pageSize",
                  "value": "10",
                  "description": "(Optional) Integer: Number of transactions per page (default: 10)."
                },
                {
                  "key": "q",
                  "value": "Groceries",
                  "description": "(Optional) String: Search term for `text`, `transfer`, `category.name` or `amount` fields.",
                  "disabled": true
                },
                {
                  "key": "isIncome",
                  "value": "false",
                  "description": "(Optional) Boolean ('true' or 'false'): Filter by income (true) or expense (false).",
                  "disabled": true
                },
                {
                  "key": "categoryId",
                  "value": "01f0z7v5-a1b2-c3d4-e5f6-78901234567a",
                  "description": "(Optional) String (UUID): Filter by a specific category ID.",
                  "disabled": true
                },
                {
                  "key": "sortBy",
                  "value": "amount",
                  "description": "(Optional) String: Field to sort by. Allowed: `createdAt`, `amount`, `text`, `categoryName`, `createdByName`, `updatedByName` (default: `createdAt`).",
                  "disabled": false
                },
                {
                  "key": "sortOrder",
                  "value": "desc",
                  "description": "(Optional) String: Sort order. Allowed: `asc`, `desc` (default: `desc`).",
                  "disabled": false
                },
                {
                  "key": "minAmount",
                  "value": "10",
                  "description": "(Optional) Number: Filter transactions with amount greater than or equal to this value."
                },
                {
                  "key": "maxAmount",
                  "value": "100",
                  "description": "(Optional) Number: Filter transactions with amount less than or equal to this value."
                }
              ]
            },
            "description": "Retrieves a list of transactions based on various filters.\nSupports filtering by account, time duration, search query, income/expense type, category, and amount range. Also supports pagination and sorting.\n\n**Authentication:** Required (`Bearer Token`).\n\n**Responses:**\n*   `200 OK`: Returns a list of transactions and pagination info.\n*   `401 Unauthorized`/`403 Forbidden`: Invalid or missing token.\n*   `500 Internal Server Error`: Database error."
          },
          "response": [
            {
              "name": "Success - Transaction List",
              "originalRequest": {
                "method": "GET",
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}",
                    "type": "text"
                  }
                ],
                "url": {
                  "raw": "{{base_url}}/transactions?accountId=01fgy5q3-p8n7-m6l5-k4j3-h2g1f0e9d8c7&page=1&pageSize=10",
                  "host": ["{{base_url}}"],
                  "path": ["transactions"],
                  "query": [
                    {
                      "key": "accountId",
                      "value": "01fgy5q3-p8n7-m6l5-k4j3-h2g1f0e9d8c7"
                    },
                    {
                      "key": "page",
                      "value": "1"
                    },
                    {
                      "key": "pageSize",
                      "value": "10"
                    }
                  ]
                }
              },
              "status": "OK",
              "code": 200,
              "_postman_previewlanguage": "json",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "cookie": [],
              "body": "{\n    \"transactions\": [\n        {\n            \"id\": \"01h3d8c3-z4a5-b6c7-d8e9-f0g1h2i3j4k5\",\n            \"amount\": 2500.00,\n            \"category\": {\n                \"id\": \"01h3d7f1-p9o8-i7u6-y5t4-r3e2w1q0a9s8\",\n                \"name\": \"Freelance Income\"\n            },\n            \"text\": \"Project Payment\",\n            \"isIncome\": true,\n            \"account\": \"01fgy5q3-p8n7-m6l5-k4j3-h2g1f0e9d8c7\",\n            \"transfer\": \"Client Corp\",\n            \"createdAt\": \"2024-07-20T10:00:00.000Z\",\n            \"createdBy\": {},\n            \"updatedBy\": {},\n            \"updatedAt\": \"2024-07-20T10:00:00.000Z\",\n            \"recurring\": false,\n            \"recurrenceType\": null,\n            \"recurrenceEndDate\": null,\n            \"currency\": \"USD\"\n        }\n    ],\n    \"pagination\": {\n        \"total\": 56,\n        \"totalPages\": 6,\n        \"currentPage\": 1,\n        \"pageSize\": 10\n    },\n    \"filters\": {\n        \"sortBy\": \"amount\",\n        \"sortOrder\": \"desc\"\n    },\n    \"dateRange\": {\n        \"minDate\": \"2024-01-01T00:00:00.000Z\",\n        \"maxDate\": \"2024-07-21T14:30:00.000Z\"\n    }\n}"
            }
          ]
        },
        {
          "name": "Create Transaction",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{auth_token}}",
                "type": "text",
                "description": "JWT token obtained from login."
              },
              {
                "key": "Content-Type",
                "value": "application/json",
                "type": "text"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"text\": \"Weekly Groceries\",\n    \"amount\": 75.50,\n    \"isIncome\": false,\n    \"transfer\": \"SuperMart\",\n    \"category\": \"01f0z7v5-a1b2-c3d4-e5f6-78901234567a\",\n    \"account\": \"01fgy5q3-p8n7-m6l5-k4j3-h2g1f0e9d8c7\",\n    \"recurring\": true,\n    \"recurrenceType\": \"weekly\",\n    \"recurrenceEndDate\": \"2025-12-31T23:59:59.000Z\",\n    \"currency\": \"USD\",\n    \"createdAt\": \"2024-07-21T11:15:00.000Z\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{base_url}}/transactions",
              "host": ["{{base_url}}"],
              "path": ["transactions"]
            },
            "description": "Creates a new financial transaction.\n\n**Process:**\n1.  Validates the input data against `transactionSchema`.\n2.  Validates the specified account exists and has sufficient balance if it's an expense.\n3.  Inserts the `Transaction` record.\n4.  Calls `handleAnalyticsUpdate` to update the `Analytics` record and `Account` balance.\n\n**Authentication:** Required (`Bearer Token`).\n\n**Body (JSON):**\n*   `text` (string, required): Description of the transaction (min 3 chars).\n*   `amount` (number, required): Transaction amount (positive value).\n*   `isIncome` (boolean, required): `true` for income, `false` for expense.\n*   `transfer` (string, optional): Counterparty or source/destination.\n*   `category` (UUID string, optional): ID of the category.\n*   `account` (UUID string, required): ID of the associated account.\n*   `recurring` (boolean, optional): Set to `true` for recurring transactions.\n*   `recurrenceType` (enum string, optional, required if `recurring` is true): 'daily', 'weekly', 'monthly', 'yearly'.\n*   `recurrenceEndDate` (ISO Date string, optional): Date when recurrence stops.\n*   `currency` (string, optional): 3-letter currency code. Defaults to account currency if not provided.\n*   `createdAt` (ISO Date string, optional): Timestamp for the transaction. Defaults to now if not provided.\n\n**Responses:**\n*   `201 Created`: Transaction created successfully.\n*   `400 Bad Request`: Validation failed, invalid account, or insufficient balance.\n*   `401 Unauthorized`/`403 Forbidden`: Invalid or missing token.\n*   `500 Internal Server Error`: Database error."
          },
          "response": [
            {
              "name": "Success - Transaction Created",
              "originalRequest": {
                "method": "POST",
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}",
                    "type": "text"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"text\": \"Weekly Groceries\",\n    \"amount\": 75.50,\n    \"isIncome\": false,\n    \"transfer\": \"SuperMart\",\n    \"category\": \"01f0z7v5-a1b2-c3d4-e5f6-78901234567a\",\n    \"account\": \"01fgy5q3-p8n7-m6l5-k4j3-h2g1f0e9d8c7\",\n    \"recurring\": true,\n    \"recurrenceType\": \"weekly\",\n    \"recurrenceEndDate\": \"2025-12-31T23:59:59.000Z\",\n    \"currency\": \"USD\"\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{base_url}}/transactions",
                  "host": ["{{base_url}}"],
                  "path": ["transactions"]
                }
              },
              "status": "Created",
              "code": 201,
              "_postman_previewlanguage": "json",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "cookie": [],
              "body": "{\n    \"message\": \"Transaction created successfully\",\n    \"data\": {\n        \"id\": \"01h4b\"\n    }\n}"
            },
            {
              "name": "Error - Insufficient Balance",
              "originalRequest": {
                "method": "POST",
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}",
                    "type": "text"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"text\": \"Large Expense\",\n    \"amount\": 10000.00,\n    \"isIncome\": false,\n    \"transfer\": \"Expensive Store\",\n    \"category\": \"01f0z7v5-a1b2-c3d4-e5f6-78901234567d\",\n    \"account\": \"01fgy5q3-p8n7-m6l5-k4j3-h2g1f0e9d8c7\"\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{base_url}}/transactions",
                  "host": ["{{base_url}}"],
                  "path": ["transactions"]
                }
              },
              "status": "Bad Request",
              "code": 400,
              "_postman_previewlanguage": "json",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "cookie": [],
              "body": "{\n    \"message\": \"Insufficient balance for this expense.\",\n    \"status\": 400\n}"
            }
          ]
        },
        {
          "name": "Get Transaction Details",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{auth_token}}",
                "type": "text",
                "description": "JWT token obtained from login."
              }
            ],
            "url": {
              "raw": "{{base_url}}/transactions/:transactionId",
              "host": ["{{base_url}}"],
              "path": ["transactions", ":transactionId"],
              "variable": [
                {
                  "key": "transactionId",
                  "value": "01h3d8c3-z4a5-b6c7-d8e9-f0g1h2i3j4k5",
                  "description": "(Required) The UUID of the transaction to retrieve."
                }
              ]
            },
            "description": "Retrieves the full details of a specific transaction by its ID. User must own the transaction.\n\n**Authentication:** Required (`Bearer Token`).\n\n**Path Variable:**\n*   `transactionId` (UUID, required): The ID of the transaction.\n\n**Responses:**\n*   `200 OK`: Returns the transaction details.\n*   `404 Not Found`: Transaction with the given ID not found.\n*   `401 Unauthorized`/`403 Forbidden`: Invalid or missing token or not owner.\n*   `500 Internal Server Error`: Database error."
          },
          "response": [
            {
              "name": "Success - Transaction Details",
              "originalRequest": {
                "method": "GET",
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}",
                    "type": "text"
                  }
                ],
                "url": {
                  "raw": "{{base_url}}/transactions/01h3d8c3-z4a5-b6c7-d8e9-f0g1h2i3j4k5",
                  "host": ["{{base_url}}"],
                  "path": [
                    "transactions",
                    "01h3d8c3-z4a5-b6c7-d8e9-f0g1h2i3j4k5"
                  ]
                }
              },
              "status": "OK",
              "code": 200,
              "_postman_previewlanguage": "json",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "cookie": [],
              "body": "{\n    \"transaction\": {\n        \"id\": \"01h3d8c3-z4a5-b6c7-d8e9-f0g1h2i3j4k5\",\n        \"amount\": 2500.00,\n        \"category\": {\n            \"id\": \"01h3d7f1-p9o8-i7u6-y5t4-r3e2w1q0a9s8\",\n            \"name\": \"Freelance Income\"\n        },\n        \"text\": \"Project Payment\",\n        \"isIncome\": true,\n        \"account\": \"01fgy5q3-p8n7-m6l5-k4j3-h2g1f0e9d8c7\",\n        \"transfer\": \"Client Corp\",\n        \"createdAt\": \"2024-07-20T10:00:00.000Z\",\n        \"createdBy\": {},\n        \"updatedBy\": {},\n        \"updatedAt\": \"2024-07-20T10:00:00.000Z\",\n        \"recurring\": false,\n        \"recurrenceType\": null,\n        \"recurrenceEndDate\": null,\n        \"currency\": \"USD\"\n    }\n}"
            }
          ]
        },
        {
          "name": "Update Transaction",
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{auth_token}}",
                "type": "text",
                "description": "JWT token obtained from login."
              },
              {
                "key": "Content-Type",
                "value": "application/json",
                "type": "text"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"text\": \"Morning Coffee (Updated Price)\",\n    \"amount\": 5.00,\n    \"isIncome\": false,\n    \"transfer\": \"Local Cafe\",\n    \"category\": \"01f0z7v5-a1b2-c3d4-e5f6-78901234567f\", \n    \"createdAt\": \"2024-07-19T09:15:00.000Z\",\n    \"recurring\": false,\n    \"recurrenceType\": null,\n    \"recurrenceEndDate\": null,\n    \"currency\": \"USD\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{base_url}}/transactions/:transactionId",
              "host": ["{{base_url}}"],
              "path": ["transactions", ":transactionId"],
              "variable": [
                {
                  "key": "transactionId",
                  "value": "01h3d8a1-x1y2-z3a4-b5c6-d7e8f9g0h1i2",
                  "description": "(Required) The UUID of the transaction to update."
                }
              ]
            },
            "description": "Updates an existing transaction owned by the authenticated user.\n\n**Process:**\n1.  Validates input against `transactionSchema`.\n2.  Finds the existing transaction.\n3.  Checks user ownership.\n4.  Calculates the change in amount and impact on account/analytics balance.\n5.  Validates sufficient balance if the change results in a net expense increase.\n6.  Updates `Transaction`, `Account`, and `Analytics` records within a database transaction.\n\n**Authentication:** Required (`Bearer Token`).\n\n**Path Variable:**\n*   `transactionId` (UUID, required): The ID of the transaction to update.\n\n**Body (JSON):** Same fields as 'Create Transaction', provide all required fields even if unchanged, except `account` which is immutable.\n\n**Responses:**\n*   `200 OK`: Transaction updated successfully.\n*   `400 Bad Request`: Validation failed, insufficient balance.\n*   `401 Unauthorized`/`403 Forbidden`: Invalid token or not owner of the transaction.\n*   `404 Not Found`: Transaction or associated account not found.\n*   `500 Internal Server Error`: Database transaction error."
          },
          "response": [
            {
              "name": "Success - Transaction Updated",
              "originalRequest": {
                "method": "PUT",
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}",
                    "type": "text"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"text\": \"Morning Coffee (Updated Price)\",\n    \"amount\": 5.00,\n    \"isIncome\": false,\n    \"transfer\": \"Local Cafe\",\n    \"category\": \"01f0z7v5-a1b2-c3d4-e5f6-78901234567f\", \n    \"createdAt\": \"2024-07-19T09:15:00.000Z\",\n    \"recurring\": false,\n    \"currency\": \"USD\"\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{base_url}}/transactions/01h3d8a1-x1y2-z3a4-b5c6-d7e8f9g0h1i2",
                  "host": ["{{base_url}}"],
                  "path": [
                    "transactions",
                    "01h3d8a1-x1y2-z3a4-b5c6-d7e8f9g0h1i2"
                  ]
                }
              },
              "status": "OK",
              "code": 200,
              "_postman_previewlanguage": "json",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "cookie": [],
              "body": "{\n    \"message\": \"Transaction updated successfully\",\n    \"data\": {}\n}"
            }
          ]
        },
        {
          "name": "Delete Transaction",
          "request": {
            "method": "DELETE",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{auth_token}}",
                "type": "text",
                "description": "JWT token obtained from login."
              }
            ],
            "url": {
              "raw": "{{base_url}}/transactions/:transactionId",
              "host": ["{{base_url}}"],
              "path": ["transactions", ":transactionId"],
              "variable": [
                {
                  "key": "transactionId",
                  "value": "01h3d8a1-x1y2-z3a4-b5c6-d7e8f9g0h1i2",
                  "description": "(Required) The UUID of the transaction to delete."
                }
              ]
            },
            "description": "**DANGER ZONE:** Deletes a transaction owned by the authenticated user.\n\n**Process:**\n1.  Finds the transaction and validates ownership.\n2.  Calculates the reverse impact on account/analytics balances.\n3.  Updates `Account` and `Analytics` balances.\n4.  Deletes the `Transaction` record within a database transaction.\n\n**Authentication:** Required (`Bearer Token`).\n\n**Path Variable:**\n*   `transactionId` (UUID, required): The ID of the transaction to delete.\n\n**Responses:**\n*   `200 OK`: Transaction deleted successfully.\n*   `404 Not Found`: Transaction not found.\n*   `401 Unauthorized`/`403 Forbidden`: Invalid token or not owner of the transaction.\n*   `500 Internal Server Error`: Database error."
          },
          "response": [
            {
              "name": "Success - Transaction Deleted",
              "originalRequest": {
                "method": "DELETE",
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}",
                    "type": "text"
                  }
                ],
                "url": {
                  "raw": "{{base_url}}/transactions/01h3d8a1-x1y2-z3a4-b5c6-d7e8f9g0h1i2",
                  "host": ["{{base_url}}"],
                  "path": [
                    "transactions",
                    "01h3d8a1-x1y2-z3a4-b5c6-d7e8f9g0h1i2"
                  ]
                }
              },
              "status": "OK",
              "code": 200,
              "_postman_previewlanguage": "json",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "cookie": [],
              "body": "{\n    \"message\": \"Transaction deleted successfully\",\n    \"id\": \"01h3d8a1-x1y2-z3a4-b5c6-d7e8f9g0h1i2\"\n}"
            }
          ]
        },
        {
          "name": "Get Recurring Transactions",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{auth_token}}",
                "type": "text",
                "description": "JWT token obtained from login."
              }
            ],
            "url": {
              "raw": "{{base_url}}/transactions/recurring?page=1&pageSize=10",
              "host": ["{{base_url}}"],
              "path": ["transactions", "recurring"],
              "query": [
                {
                  "key": "page",
                  "value": "1",
                  "description": "(Optional) Integer: Page number (default: 1)."
                },
                {
                  "key": "pageSize",
                  "value": "10",
                  "description": "(Optional) Integer: Items per page (default: 10)."
                }
              ]
            },
            "description": "Retrieves a list of all recurring transactions (templates) created by the authenticated user. Supports pagination.\n\n**Authentication:** Required (`Bearer Token`).\n\n**Responses:**\n*   `200 OK`: Returns a list of recurring transactions and pagination info.\n*   `401 Unauthorized`/`403 Forbidden`: Invalid or missing token.\n*   `500 Internal Server Error`: Database error."
          },
          "response": [
            {
              "name": "Success - Recurring Transaction List",
              "originalRequest": {},
              "status": "OK",
              "code": 200,
              "_postman_previewlanguage": "json",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "cookie": [],
              "body": "{\n    \"transactions\": [\n        {\n            \"id\": \"01h4b\",\n            \"amount\": 75.50,\n            \"category\": {},\n            \"text\": \"Weekly Groceries\",\n            \"isIncome\": false,\n            \"account\": \"01fgy5q3-p8n7-m6l5-k4j3-h2g1f0e9d8c7\",\n            \"transfer\": \"SuperMart\",\n            \"createdAt\": \"2024-07-21T11:15:00.000Z\",\n            \"recurring\": true,\n            \"recurrenceType\": \"weekly\",\n            \"recurrenceEndDate\": \"2025-12-31T23:59:59.000Z\",\n            \"currency\": \"USD\"\n        }\n    ],\n    \"pagination\": {\n        \"total\": 1,\n        \"totalPages\": 1,\n        \"currentPage\": 1,\n        \"pageSize\": 10\n    }\n}"
            }
          ]
        },
        {
          "name": "Get Recurring Transaction Details",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{auth_token}}",
                "type": "text",
                "description": "JWT token obtained from login."
              }
            ],
            "url": {
              "raw": "{{base_url}}/transactions/recurring/:transactionId",
              "host": ["{{base_url}}"],
              "path": ["transactions", "recurring", ":transactionId"],
              "variable": [
                {
                  "key": "transactionId",
                  "value": "your-recurring-transaction-uuid",
                  "description": "(Required) The UUID of the recurring transaction."
                }
              ]
            },
            "description": "Retrieves the details of a specific recurring transaction owned by the authenticated user.\n\n**Authentication:** Required (`Bearer Token`).\n\n**Path Variable:**\n*   `transactionId` (UUID, required): ID of the recurring transaction.\n\n**Responses:**\n*   `200 OK`: Returns the recurring transaction details.\n*   `404 Not Found`: Recurring transaction with the given ID not found or not owned by the user.\n*   `401 Unauthorized`/`403 Forbidden`: Invalid or missing token.\n*   `500 Internal Server Error`: Database error."
          },
          "response": [
            {
              "name": "Success - Recurring Transaction Details",
              "originalRequest": {},
              "status": "OK",
              "code": 200,
              "_postman_previewlanguage": "json",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "cookie": [],
              "body": "{\n    \"transaction\": {\n        \"id\": \"01h4b\",\n        \"amount\": 75.50,\n        \"category\": {},\n        \"text\": \"Weekly Groceries\",\n        \"isIncome\": false,\n        \"account\": \"01fgy5q3-p8n7-m6l5-k4j3-h2g1f0e9d8c7\",\n        \"transfer\": \"SuperMart\",\n        \"createdAt\": \"2024-07-21T11:15:00.000Z\",\n        \"recurring\": true,\n        \"recurrenceType\": \"weekly\",\n        \"recurrenceEndDate\": \"2025-12-31T23:59:59.000Z\",\n        \"currency\": \"USD\"\n    }\n}"
            }
          ]
        },
        {
          "name": "Update Recurring Transaction",
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{auth_token}}",
                "type": "text",
                "description": "JWT token obtained from login."
              },
              {
                "key": "Content-Type",
                "value": "application/json",
                "type": "text"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"text\": \"Monthly Rent Payment\",\n    \"amount\": 1200.00,\n    \"isIncome\": false,\n    \"transfer\": \"Landlord\",\n    \"category\": \"01f0z7v5-a1b2-c3d4-e5f6-78901234567c\",\n    \"account\": \"01fgy5q3-p8n7-m6l5-k4j3-h2g1f0e9d8c7\", \n    \"recurring\": true,\n    \"recurrenceType\": \"monthly\",\n    \"recurrenceEndDate\": \"2026-12-31T23:59:59.000Z\",\n    \"currency\": \"USD\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{base_url}}/transactions/recurring/:transactionId",
              "host": ["{{base_url}}"],
              "path": ["transactions", "recurring", ":transactionId"],
              "variable": [
                {
                  "key": "transactionId",
                  "value": "your-recurring-transaction-uuid",
                  "description": "(Required) The UUID of the recurring transaction to update."
                }
              ]
            },
            "description": "Updates an existing recurring transaction owned by the authenticated user. \n\n**Note:** Unlike the standard update, this endpoint **does NOT** automatically adjust past analytics or account balances based on the changes made to the recurring template. It only updates the template itself for future occurrences.\n\n**Authentication:** Required (`Bearer Token`).\n\n**Path Variable:**\n*   `transactionId` (UUID, required): ID of the recurring transaction template.\n\n**Body (JSON):** Same fields as 'Create Transaction', must include recurring details.\n\n**Responses:**\n*   `200 OK`: Recurring transaction updated successfully.\n*   `400 Bad Request`: Validation failed, transaction not found, or trying to update a non-recurring transaction.\n*   `401 Unauthorized`/`403 Forbidden`: Invalid token or not owner.\n*   `500 Internal Server Error`: Database error."
          },
          "response": [
            {
              "name": "Success - Recurring Transaction Updated",
              "originalRequest": {},
              "status": "OK",
              "code": 200,
              "_postman_previewlanguage": "json",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "cookie": [],
              "body": "{\n    \"message\": \"Transaction updated successfully\",\n    \"data\": {}\n}"
            }
          ]
        },
        {
          "name": "Delete Recurring Transaction",
          "request": {
            "method": "DELETE",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{auth_token}}",
                "type": "text",
                "description": "JWT token obtained from login."
              }
            ],
            "url": {
              "raw": "{{base_url}}/transactions/recurring/:transactionId",
              "host": ["{{base_url}}"],
              "path": ["transactions", "recurring", ":transactionId"],
              "variable": [
                {
                  "key": "transactionId",
                  "value": "your-recurring-transaction-uuid",
                  "description": "(Required) The UUID of the recurring transaction to delete."
                }
              ]
            },
            "description": "Deletes a recurring transaction template owned by the authenticated user. This **does not** delete past transactions created by this recurrence rule, nor does it adjust historical balances.\n\n**Authentication:** Required (`Bearer Token`).\n\n**Path Variable:**\n*   `transactionId` (UUID, required): ID of the recurring transaction template.\n\n**Responses:**\n*   `200 OK`: Recurring transaction deleted successfully.\n*   `404 Not Found`: Recurring transaction not found.\n*   `401 Unauthorized`/`403 Forbidden`: Invalid token or not owner.\n*   `500 Internal Server Error`: Database error."
          },
          "response": [
            {
              "name": "Success - Recurring Transaction Deleted",
              "originalRequest": {},
              "status": "OK",
              "code": 200,
              "_postman_previewlanguage": "json",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "cookie": [],
              "body": "{\n    \"message\": \"Transaction deleted successfully\",\n    \"id\": \"your-recurring-transaction-uuid\"\n}"
            }
          ]
        },
        {
          "name": "Skip Next Recurring Transaction",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{auth_token}}",
                "type": "text",
                "description": "JWT token obtained from login."
              }
            ],
            "url": {
              "raw": "{{base_url}}/transactions/recurring/:transactionId/skip",
              "host": ["{{base_url}}"],
              "path": ["transactions", "recurring", ":transactionId", "skip"],
              "variable": [
                {
                  "key": "transactionId",
                  "value": "your-recurring-transaction-uuid",
                  "description": "(Required) The UUID of the recurring transaction to skip."
                }
              ]
            },
            "description": "Skips the *next* scheduled occurrence of a recurring transaction. **(Current implementation is a placeholder - it just updates the `updatedAt` timestamp).** A proper implementation would calculate the next due date and adjust the `createdAt` or a dedicated `nextOccurrence` field.\n\n**Authentication:** Required (`Bearer Token`).\n\n**Path Variable:**\n*   `transactionId` (UUID, required): ID of the recurring transaction.\n\n**Responses:**\n*   `200 OK`: Skip noted (placeholder action).\n*   `404 Not Found`: Recurring transaction not found.\n*   `401 Unauthorized`/`403 Forbidden`: Invalid token or not owner.\n*   `500 Internal Server Error`: Database error."
          },
          "response": [
            {
              "name": "Success - Transaction Skipped (Placeholder)",
              "originalRequest": {},
              "status": "OK",
              "code": 200,
              "_postman_previewlanguage": "json",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "cookie": [],
              "body": "{\n    \"message\": \"Recurring transaction skip noted (placeholder action).\",\n    \"id\": \"your-recurring-transaction-uuid\"\n}"
            }
          ]
        },
        {
          "name": "Export Transactions",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{auth_token}}",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{base_url}}/transactions/export?accountId=01fgy5q3-p8n7-m6l5-k4j3-h2g1f0e9d8c7&duration=thisMonth&isIncome=false&categoryId=01f0z7v5-a1b2-c3d4-e5f6-78901234567a&format=xlsx&minAmount=10&maxAmount=100",
              "host": ["{{base_url}}"],
              "path": ["transactions", "export"],
              "query": [
                {
                  "key": "accountId",
                  "value": "01fgy5q3-p8n7-m6l5-k4j3-h2g1f0e9d8c7",
                  "description": "(Optional) Filter by account ID.",
                  "disabled": true
                },
                {
                  "key": "duration",
                  "value": "thisMonth",
                  "description": "(Optional) Filter by time period ('today', 'thisMonth', 'YYYY-MM-DD,YYYY-MM-DD', etc.)."
                },
                {
                  "key": "q",
                  "value": "Groceries",
                  "description": "(Optional) Search query.",
                  "disabled": true
                },
                {
                  "key": "isIncome",
                  "value": "false",
                  "description": "(Optional) Filter by type ('true' or 'false').",
                  "disabled": true
                },
                {
                  "key": "categoryId",
                  "value": "01f0z7v5-a1b2-c3d4-e5f6-78901234567a",
                  "description": "(Optional) Filter by category ID.",
                  "disabled": true
                },
                {
                  "key": "format",
                  "value": "xlsx",
                  "description": "(Optional) Export format ('xlsx' or 'csv'). Default: 'xlsx'."
                },
                {
                  "key": "minAmount",
                  "value": "10",
                  "description": "(Optional) Minimum transaction amount."
                },
                {
                  "key": "maxAmount",
                  "value": "100",
                  "description": "(Optional) Maximum transaction amount."
                }
              ]
            },
            "description": "Exports transactions based on the applied filters to either an XLSX or CSV file.\n\n**Authentication:** Required (`Bearer Token`).\n\n**Query Parameters:** Accepts the same filters as `GET /transactions` plus `format` (`xlsx` or `csv`).\n\n**Responses:**\n*   `200 OK`: Returns the generated file (`application/vnd.openxmlformats-officedocument.spreadsheetml.sheet` for xlsx, `text/csv` for csv).\n*   `400 Bad Request`: Invalid filter parameters or format.\n*   `404 Not Found`: No transactions found matching criteria.\n*   `401 Unauthorized`/`403 Forbidden`: Invalid token.\n*   `500 Internal Server Error`: Database or file generation error."
          },
          "response": [
            {
              "name": "Success - XLSX Export",
              "originalRequest": {},
              "status": "OK",
              "code": 200,
              "_postman_previewlanguage": "text",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
                },
                {
                  "key": "Content-Disposition",
                  "value": "attachment; filename=\"transactions_20240721_153000.xlsx\""
                }
              ],
              "cookie": [],
              "body": ""
            },
            {
              "name": "Success - CSV Export",
              "originalRequest": {},
              "status": "OK",
              "code": 200,
              "_postman_previewlanguage": "text",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "text/csv"
                },
                {
                  "key": "Content-Disposition",
                  "value": "attachment; filename=\"transactions_20240721_153500.csv\""
                }
              ],
              "cookie": [],
              "body": "\"Date\",\"Description\",\"Amount\",\"Type\",\"Category\",\"Account\",\"Currency\",\"Transfer\"\n\"2024-07-19 09:15:00\",\"Morning Coffee (Updated Price)\",-5.00,\"Expense\",\"Eating Out\",\"Main Checking (Updated)\",\"USD\",\"Local Cafe\""
            }
          ]
        },
        {
          "name": "Get Category Chart Data",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{auth_token}}",
                "type": "text",
                "description": "JWT token obtained from login."
              }
            ],
            "url": {
              "raw": "{{base_url}}/transactions/by/category/chart?duration=thisMonth&accountId=01fgy5q3-p8n7-m6l5-k4j3-h2g1f0e9d8c7",
              "host": ["{{base_url}}"],
              "path": ["transactions", "by", "category", "chart"],
              "query": [
                {
                  "key": "duration",
                  "value": "thisMonth",
                  "description": "(Required) String: Time period filter. Options: 'today', 'thisWeek', 'thisMonth', 'thisYear', 'all', or custom 'YYYY-MM-DD,YYYY-MM-DD'."
                },
                {
                  "key": "accountId",
                  "value": "01fgy5q3-p8n7-m6l5-k4j3-h2g1f0e9d8c7",
                  "description": "(Optional) Filter by a specific account ID."
                }
              ]
            },
            "description": "Retrieves aggregated income and expense totals grouped by category for a specified duration. Suitable for creating pie charts or bar charts.\n\n**Authentication:** Required (`Bearer Token`).\n\n**Responses:**\n*   `200 OK`: Returns an object with arrays for `name`, `totalIncome`, and `totalExpense`.\n*   `400 Bad Request`: Missing or invalid `duration`.\n*   `401 Unauthorized`/`403 Forbidden`: Invalid or missing token.\n*   `500 Internal Server Error`: Database error."
          },
          "response": [
            {
              "name": "Success - Category Chart Data",
              "originalRequest": {},
              "status": "OK",
              "code": 200,
              "_postman_previewlanguage": "json",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "cookie": [],
              "body": "{\n    \"name\": [\n        \"Groceries\",\n        \"Freelance Income\",\n        \"Utilities\",\n        \"Eating Out\"\n    ],\n    \"totalIncome\": [\n        0,\n        2500.00,\n        0,\n        0\n    ],\n    \"totalExpense\": [\n        150.75,\n        0,\n        85.20,\n        45.50\n    ]\n}"
            }
          ]
        },
        {
          "name": "Get Income vs Expense Totals",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{auth_token}}",
                "type": "text",
                "description": "JWT token obtained from login."
              }
            ],
            "url": {
              "raw": "{{base_url}}/transactions/by/income/expense?accountId=01fgy5q3-p8n7-m6l5-k4j3-h2g1f0e9d8c7&duration=thisYear",
              "host": ["{{base_url}}"],
              "path": ["transactions", "by", "income", "expense"],
              "query": [
                {
                  "key": "accountId",
                  "value": "01fgy5q3-p8n7-m6l5-k4j3-h2g1f0e9d8c7",
                  "description": "(Optional) String (UUID): Filter by a specific account. If omitted, aggregates across all user's accounts."
                },
                {
                  "key": "duration",
                  "value": "thisYear",
                  "description": "(Required) String: Time period filter. Options: 'today', 'thisWeek', 'thisMonth', 'thisYear', 'all', or custom 'YYYY-MM-DD,YYYY-MM-DD'."
                }
              ]
            },
            "description": "Calculates the total income and total expense for a specified duration, optionally filtered by account.\n\n**Authentication:** Required (`Bearer Token`).\n\n**Responses:**\n*   `200 OK`: Returns an object with `income` and `expense` totals.\n*   `400 Bad Request`: Missing or invalid `duration`.\n*   `401 Unauthorized`/`403 Forbidden`: Invalid or missing token.\n*   `500 Internal Server Error`: Database error."
          },
          "response": [
            {
              "name": "Success - Income/Expense Totals",
              "originalRequest": {},
              "status": "OK",
              "code": 200,
              "_postman_previewlanguage": "json",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "cookie": [],
              "body": "{\n    \"income\": 15500.00,\n    \"expense\": 11250.80\n}"
            }
          ]
        },
        {
          "name": "Get Income vs Expense Chart Data",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{auth_token}}",
                "type": "text",
                "description": "JWT token obtained from login."
              }
            ],
            "url": {
              "raw": "{{base_url}}/transactions/by/income/expense/chart?accountId=01fgy5q3-p8n7-m6l5-k4j3-h2g1f0e9d8c7&duration=thisWeek",
              "host": ["{{base_url}}"],
              "path": ["transactions", "by", "income", "expense", "chart"],
              "query": [
                {
                  "key": "accountId",
                  "value": "01fgy5q3-p8n7-m6l5-k4j3-h2g1f0e9d8c7",
                  "description": "(Optional) String (UUID): Filter by a specific account. If omitted, aggregates across all user's accounts."
                },
                {
                  "key": "duration",
                  "value": "thisWeek",
                  "description": "(Required) String: Time period filter. Options: 'today', 'thisWeek', 'thisMonth', 'thisYear', 'all', or custom 'YYYY-MM-DD,YYYY-MM-DD'. Determines grouping (hour, day, month, year)."
                }
              ]
            },
            "description": "Retrieves time-series data for income, expense, and balance over a specified duration, suitable for line charts. The time grouping (hour, day, month, year) is determined automatically based on the duration.\n\n**Authentication:** Required (`Bearer Token`).\n\n**Responses:**\n*   `200 OK`: Returns an object with arrays for `date`, `income`, `expense`, and `balance`.\n*   `400 Bad Request`: Missing or invalid `duration`.\n*   `401 Unauthorized`/`403 Forbidden`: Invalid or missing token.\n*   `500 Internal Server Error`: Database error."
          },
          "response": [
            {
              "name": "Success - Income/Expense Chart Data",
              "originalRequest": {},
              "status": "OK",
              "code": 200,
              "_postman_previewlanguage": "json",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "cookie": [],
              "body": "{\n    \"date\": [\n        \"Jul 15\",\n        \"Jul 16\",\n        \"Jul 17\",\n        \"Jul 18\",\n        \"Jul 19\",\n        \"Jul 20\",\n        \"Jul 21\"\n    ],\n    \"income\": [\n        0,\n        500.00,\n        0,\n        0,\n        0,\n        2500.00,\n        0\n    ],\n    \"expense\": [\n        12.99,\n        85.00,\n        40.00,\n        15.00,\n        5.00,\n        0,\n        75.50\n    ],\n    \"balance\": [\n        -12.99,\n        415.00,\n        -40.00,\n        -15.00,\n        -5.00,\n        2500.00,\n        -75.50\n    ]\n}"
            }
          ]
        },
        {
          "name": "Generate Fake Transaction Data (Excel)",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/transactions/fakeData/by?duration=thisYear&length=500",
              "host": ["{{base_url}}"],
              "path": ["transactions", "fakeData", "by"],
              "query": [
                {
                  "key": "duration",
                  "value": "thisYear",
                  "description": "(Required) String: Time period over which to generate dates. Options: 'today', 'thisWeek', 'thisMonth', 'thisYear', 'all', or custom 'YYYY-MM-DD,YYYY-MM-DD'."
                },
                {
                  "key": "length",
                  "value": "500",
                  "description": "(Required) Integer: The number of fake transaction records to generate (1-1000)."
                }
              ]
            },
            "description": "**Utility Endpoint:** Generates a specified number of fake transaction records with random data (text, amount, type, transfer, category, date within the duration) and returns them as an XLSX file download. Useful for testing import functionality or populating development environments.\n\n**Authentication:** Not Required.\n\n**Responses:**\n*   `200 OK`: Returns the generated XLSX file.\n*   `400 Bad Request`: Missing or invalid `duration` or `length`.\n*   `500 Internal Server Error`: Error during data generation or file creation."
          },
          "response": [
            {
              "name": "Success - Fake Data File",
              "originalRequest": {},
              "status": "OK",
              "code": 200,
              "_postman_previewlanguage": "text",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
                },
                {
                  "key": "Content-Disposition",
                  "value": "attachment; filename=sample_transactions.xlsx"
                }
              ],
              "cookie": [],
              "body": ""
            }
          ]
        }
      ]
    },
    {
      "name": "Category",
      "description": "Endpoints for managing transaction categories (both predefined and user-created).",
      "item": [
        {
          "name": "Get All Categories",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{auth_token}}",
                "type": "text",
                "description": "JWT token obtained from login."
              }
            ],
            "url": {
              "raw": "{{base_url}}/category?page=1&limit=10&search=Util&sortBy=name&sortOrder=asc",
              "host": ["{{base_url}}"],
              "path": ["category"],
              "query": [
                {
                  "key": "page",
                  "value": "1",
                  "description": "(Optional) Integer: The page number to retrieve (default: 1)."
                },
                {
                  "key": "limit",
                  "value": "10",
                  "description": "(Optional) Integer: The number of categories per page (default: 10)."
                },
                {
                  "key": "search",
                  "value": "Util",
                  "description": "(Optional) String: Search term to filter categories by name (case-insensitive).",
                  "disabled": true
                },
                {
                  "key": "sortBy",
                  "value": "name",
                  "description": "(Optional) String: Field to sort by. Allowed values: `name`, `createdAt`, `id` (default: `createdAt`)."
                },
                {
                  "key": "sortOrder",
                  "value": "asc",
                  "description": "(Optional) String: Sort order. Allowed values: `asc`, `desc` (default: `desc`)."
                }
              ]
            },
            "description": "Retrieves a list of transaction categories accessible to the authenticated user (includes categories created by the user).\nSupports pagination, searching by name, and sorting.\n\n**Authentication:** Required (`Bearer Token`).\n\n**Responses:**\n*   `200 OK`: Returns a list of categories and pagination info.\n*   `401 Unauthorized`/`403 Forbidden`: Invalid or missing token.\n*   `500 Internal Server Error`: Database error."
          },
          "response": [
            {
              "name": "Success - Categories List",
              "originalRequest": {
                "method": "GET",
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}",
                    "type": "text"
                  }
                ],
                "url": {
                  "raw": "{{base_url}}/category?page=1&limit=10",
                  "host": ["{{base_url}}"],
                  "path": ["category"],
                  "query": [
                    {
                      "key": "page",
                      "value": "1"
                    },
                    {
                      "key": "limit",
                      "value": "10"
                    }
                  ]
                }
              },
              "status": "OK",
              "code": 200,
              "_postman_previewlanguage": "json",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "cookie": [],
              "body": "{\n    \"categories\": [\n        {\n            \"id\": \"01f0z7v5-a1b2-c3d4-e5f6-78901234567b\",\n            \"name\": \"Utilities\",\n            \"owner\": \"01exdcba-f100-7000-8f61-daac05c5c78e\"\n        },\n        {\n            \"id\": \"01h3d7f1-p9o8-i7u6-y5t4-r3e2w1q0a9s8\",\n            \"name\": \"My Custom Category\",\n            \"owner\": \"01exdcba-f100-7000-8f61-daac05c5c78e\"\n        }\n    ],\n    \"pagination\": {\n        \"total\": 2,\n        \"totalPages\": 1,\n        \"page\": 1,\n        \"limit\": 10\n    }\n}"
            }
          ]
        },
        {
          "name": "Create Category",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{auth_token}}",
                "type": "text",
                "description": "JWT token obtained from login."
              },
              {
                "key": "Content-Type",
                "value": "application/json",
                "type": "text"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"name\": \"Freelance Income\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{base_url}}/category",
              "host": ["{{base_url}}"],
              "path": ["category"]
            },
            "description": "Creates a new custom transaction category for the authenticated user.\n\n**Authentication:** Required (`Bearer Token`).\n\n**Body (JSON):**\n*   `name` (string, required): The name of the new category (1-64 characters). Must be unique for the user.\n\n**Responses:**\n*   `201 Created`: Category created successfully, returns the new category object.\n*   `400 Bad Request`: Validation failed (e.g., name missing or too long).\n*   `401 Unauthorized`/`403 Forbidden`: Invalid or missing token.\n*   `409 Conflict`: If a category with the same name already exists for the user.\n*   `500 Internal Server Error`: Database error."
          },
          "response": [
            {
              "name": "Success - Category Created",
              "originalRequest": {
                "method": "POST",
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}",
                    "type": "text"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\"name\":\"Freelance Income\"}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{base_url}}/category",
                  "host": ["{{base_url}}"],
                  "path": ["category"]
                }
              },
              "status": "Created",
              "code": 201,
              "_postman_previewlanguage": "json",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "cookie": [],
              "body": "{\n    \"message\": \"Category created successfully\",\n    \"data\": {\n        \"id\": \"01h3d7f1-p9o8-i7u6-y5t4-r3e2w1q0a9s8\",\n        \"createdAt\": \"2024-07-21T10:30:00.123Z\",\n        \"updatedAt\": null,\n        \"name\": \"Freelance Income\",\n        \"owner\": \"01exdcba-f100-7000-8f61-daac05c5c78e\"\n    }\n}"
            }
          ]
        },
        {
          "name": "Update Category",
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{auth_token}}",
                "type": "text",
                "description": "JWT token obtained from login."
              },
              {
                "key": "Content-Type",
                "value": "application/json",
                "type": "text"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"name\": \"Side Hustle Income\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{base_url}}/category/:categoryId",
              "host": ["{{base_url}}"],
              "path": ["category", ":categoryId"],
              "variable": [
                {
                  "key": "categoryId",
                  "value": "01h3d7f1-p9o8-i7u6-y5t4-r3e2w1q0a9s8",
                  "description": "(Required) The UUID of the category to update."
                }
              ]
            },
            "description": "Updates the name of an existing custom category created by the authenticated user.\n\n**Authentication:** Required (`Bearer Token`).\n\n**Path Variable:**\n*   `categoryId` (UUID, required): The ID of the category to update.\n\n**Body (JSON):**\n*   `name` (string, required): The new name for the category (1-64 characters). Must be unique for the user.\n\n**Responses:**\n*   `200 OK`: Category updated successfully.\n*   `400 Bad Request`: Validation failed.\n*   `401 Unauthorized`/`403 Forbidden`: Invalid or missing token, or attempting to update a category not owned by the user.\n*   `404 Not Found`: Category with the given ID not found.\n*   `409 Conflict`: Another category with the new name already exists.\n*   `500 Internal Server Error`: Database error."
          },
          "response": [
            {
              "name": "Success - Category Updated",
              "originalRequest": {
                "method": "PUT",
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}",
                    "type": "text"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\"name\":\"Side Hustle Income\"}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{base_url}}/category/01h3d7f1-p9o8-i7u6-y5t4-r3e2w1q0a9s8",
                  "host": ["{{base_url}}"],
                  "path": ["category", "01h3d7f1-p9o8-i7u6-y5t4-r3e2w1q0a9s8"]
                }
              },
              "status": "OK",
              "code": 200,
              "_postman_previewlanguage": "json",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "cookie": [],
              "body": "{\n    \"message\": \"Category updated successfully\"\n}"
            }
          ]
        },
        {
          "name": "Delete Category",
          "request": {
            "method": "DELETE",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{auth_token}}",
                "type": "text",
                "description": "JWT token obtained from login."
              }
            ],
            "url": {
              "raw": "{{base_url}}/category/:categoryId",
              "host": ["{{base_url}}"],
              "path": ["category", ":categoryId"],
              "variable": [
                {
                  "key": "categoryId",
                  "value": "01h3d7f1-p9o8-i7u6-y5t4-r3e2w1q0a9s8",
                  "description": "(Required) The UUID of the category to delete."
                }
              ]
            },
            "description": "**DANGER ZONE:** Deletes a custom category created by the authenticated user. Cannot delete if transactions are associated with it.\n\n**Authentication:** Required (`Bearer Token`).\n\n**Path Variable:**\n*   `categoryId` (UUID, required): The ID of the category to delete.\n\n**Responses:**\n*   `200 OK`: Category deleted successfully.\n*   `400 Bad Request`: Cannot delete category with associated transactions.\n*   `401 Unauthorized`/`403 Forbidden`: Invalid or missing token, or attempting to delete a category not owned by the user.\n*   `404 Not Found`: Category with the given ID not found.\n*   `500 Internal Server Error`: Database error."
          },
          "response": [
            {
              "name": "Success - Category Deleted",
              "originalRequest": {
                "method": "DELETE",
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}",
                    "type": "text"
                  }
                ],
                "url": {
                  "raw": "{{base_url}}/category/01h3d7f1-p9o8-i7u6-y5t4-r3e2w1q0a9s8",
                  "host": ["{{base_url}}"],
                  "path": ["category", "01h3d7f1-p9o8-i7u6-y5t4-r3e2w1q0a9s8"]
                }
              },
              "status": "OK",
              "code": 200,
              "_postman_previewlanguage": "json",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "cookie": [],
              "body": "{\n    \"message\": \"Category deleted successfully\"\n}"
            },
            {
              "name": "Error - Transactions Associated",
              "originalRequest": {},
              "status": "Bad Request",
              "code": 400,
              "_postman_previewlanguage": "json",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "cookie": [],
              "body": "{\n    \"message\": \"Cannot delete category with associated transactions. Please reassign transactions first.\",\n    \"status\": 400\n}"
            }
          ]
        }
      ]
    },
    {
      "name": "Budgets",
      "description": "Endpoints for managing monthly/yearly budgets per category.",
      "item": [
        {
          "name": "Create Budget",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{auth_token}}",
                "type": "text",
                "description": "JWT token obtained from login."
              },
              {
                "key": "Content-Type",
                "value": "application/json",
                "type": "text"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"categoryId\": \"01f0z7v5-a1b2-c3d4-e5f6-78901234567a\",\n    \"month\": 7,\n    \"year\": 2024,\n    \"amount\": 250.00\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{base_url}}/budget",
              "host": ["{{base_url}}"],
              "path": ["budget"]
            },
            "description": "Creates a new budget for a specific category, month, and year for the authenticated user. A user can only have one budget per category/month/year combination.\n\n**Authentication:** Required (`Bearer Token`).\n\n**Body (JSON):**\n*   `categoryId` (UUID string, required): ID of the category for this budget.\n*   `month` (integer, required): Month number (1-12).\n*   `year` (integer, required): Year (e.g., 2024).\n*   `amount` (number, required): Budgeted amount for this period.\n\n**Responses:**\n*   `201 Created`: Budget created successfully, returns the new budget object.\n*   `400 Bad Request`: Validation failed (invalid category, month, year, amount).\n*   `401 Unauthorized`/`403 Forbidden`: Invalid or missing token.\n*   `404 Not Found`: Category not found or access denied.\n*   `409 Conflict`: Budget already exists for this category/month/year.\n*   `500 Internal Server Error`: Database error."
          },
          "response": [
            {
              "name": "Success - Budget Created",
              "originalRequest": {},
              "status": "Created",
              "code": 201,
              "_postman_previewlanguage": "json",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "cookie": [],
              "body": "{\n    \"message\": \"Budget created successfully\",\n    \"data\": {\n        \"id\": \"01h5e1f2-g3h4-i5j6-k7l8-m9n0o1p2q3r4\",\n        \"createdAt\": \"2024-07-21T12:00:00.123Z\",\n        \"updatedAt\": null,\n        \"userId\": \"01exdcba-f100-7000-8f61-daac05c5c78e\",\n        \"category\": \"01f0z7v5-a1b2-c3d4-e5f6-78901234567a\",\n        \"month\": 7,\n        \"year\": 2024,\n        \"amount\": 250.00\n    }\n}"
            }
          ]
        },
        {
          "name": "Get All Budgets",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{auth_token}}",
                "type": "text",
                "description": "JWT token obtained from login."
              }
            ],
            "url": {
              "raw": "{{base_url}}/budget/all?page=1&limit=10&sortBy=year&sortOrder=desc",
              "host": ["{{base_url}}"],
              "path": ["budget", "all"],
              "query": [
                {
                  "key": "page",
                  "value": "1",
                  "description": "(Optional) Integer: Page number (default: 1)."
                },
                {
                  "key": "limit",
                  "value": "10",
                  "description": "(Optional) Integer: Items per page (default: 10)."
                },
                {
                  "key": "sortBy",
                  "value": "year",
                  "description": "(Optional) String: Field to sort by (e.g., 'year', 'month', 'amount', 'createdAt'). Default: 'createdAt'."
                },
                {
                  "key": "sortOrder",
                  "value": "desc",
                  "description": "(Optional) String: Sort order ('asc' or 'desc'). Default: 'desc'."
                }
              ]
            },
            "description": "Retrieves a list of all budgets created by the authenticated user. Supports pagination and sorting.\n\n**Authentication:** Required (`Bearer Token`).\n\n**Path Parameter:** Uses `/all` instead of a dynamic ID to signify fetching for the current user.\n\n**Query Parameters:**\n*   `page`, `limit`: For pagination.\n*   `sortBy`, `sortOrder`: For sorting.\n\n**Responses:**\n*   `200 OK`: Returns a list of budgets and pagination info.\n*   `401 Unauthorized`/`403 Forbidden`: Invalid token.\n*   `500 Internal Server Error`: Database error."
          },
          "response": [
            {
              "name": "Success - Budgets List",
              "originalRequest": {},
              "status": "OK",
              "code": 200,
              "_postman_previewlanguage": "json",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "cookie": [],
              "body": "{\n    \"data\": [\n        {\n            \"id\": \"01h5e1f2-g3h4-i5j6-k7l8-m9n0o1p2q3r4\",\n            \"createdAt\": \"2024-07-21T12:00:00.123Z\",\n            \"updatedAt\": null,\n            \"userId\": \"01exdcba-f100-7000-8f61-daac05c5c78e\",\n            \"category\": { \n              \"id\": \"01f0z7v5-a1b2-c3d4-e5f6-78901234567a\",\n              \"name\": \"Groceries\"\n            },\n            \"month\": 7,\n            \"year\": 2024,\n            \"amount\": 250.00\n        }\n    ],\n    \"pagination\": {\n        \"total\": 15,\n        \"totalPages\": 2,\n        \"page\": 1,\n        \"limit\": 10\n    }\n}"
            }
          ]
        },
        {
          "name": "Update Budget",
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{auth_token}}",
                "type": "text",
                "description": "JWT token obtained from login."
              },
              {
                "key": "Content-Type",
                "value": "application/json",
                "type": "text"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"amount\": 300.00\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{base_url}}/budget/:budgetId",
              "host": ["{{base_url}}"],
              "path": ["budget", ":budgetId"],
              "variable": [
                {
                  "key": "budgetId",
                  "value": "01h5e1f2-g3h4-i5j6-k7l8-m9n0o1p2q3r4",
                  "description": "(Required) The UUID of the budget record to update."
                }
              ]
            },
            "description": "Updates the amount of an existing budget owned by the authenticated user.\n\n**Authentication:** Required (`Bearer Token`).\n\n**Path Variable:**\n*   `budgetId` (UUID, required): ID of the budget to update.\n\n**Body (JSON):**\n*   `amount` (number, required): The new budgeted amount (must be >= 0).\n\n**Responses:**\n*   `200 OK`: Budget updated successfully.\n*   `400 Bad Request`: Invalid amount.\n*   `401 Unauthorized`/`403 Forbidden`: Invalid token or not owner.\n*   `404 Not Found`: Budget not found.\n*   `500 Internal Server Error`: Database error."
          },
          "response": [
            {
              "name": "Success - Budget Updated",
              "originalRequest": {},
              "status": "OK",
              "code": 200,
              "_postman_previewlanguage": "json",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "cookie": [],
              "body": "{\n    \"message\": \"Budget updated successfully!\",\n    \"id\": \"01h5e1f2-g3h4-i5j6-k7l8-m9n0o1p2q3r4\"\n}"
            }
          ]
        },
        {
          "name": "Delete Budget",
          "request": {
            "method": "DELETE",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{auth_token}}",
                "type": "text",
                "description": "JWT token obtained from login."
              }
            ],
            "url": {
              "raw": "{{base_url}}/budget/:budgetId",
              "host": ["{{base_url}}"],
              "path": ["budget", ":budgetId"],
              "variable": [
                {
                  "key": "budgetId",
                  "value": "01h5e1f2-g3h4-i5j6-k7l8-m9n0o1p2q3r4",
                  "description": "(Required) The UUID of the budget record to delete."
                }
              ]
            },
            "description": "Deletes a budget record owned by the authenticated user.\n\n**Authentication:** Required (`Bearer Token`).\n\n**Path Variable:**\n*   `budgetId` (UUID, required): ID of the budget to delete.\n\n**Responses:**\n*   `200 OK`: Budget deleted successfully.\n*   `401 Unauthorized`/`403 Forbidden`: Invalid token or not owner.\n*   `404 Not Found`: Budget not found.\n*   `500 Internal Server Error`: Database error."
          },
          "response": [
            {
              "name": "Success - Budget Deleted",
              "originalRequest": {},
              "status": "OK",
              "code": 200,
              "_postman_previewlanguage": "json",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "cookie": [],
              "body": "{\n    \"message\": \"Budget Deleted successfully!\"\n}"
            }
          ]
        },
        {
          "name": "Get Budget Summary",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{auth_token}}",
                "type": "text",
                "description": "JWT token obtained from login."
              }
            ],
            "url": {
              "raw": "{{base_url}}/budget/summary?month=7&year=2024",
              "host": ["{{base_url}}"],
              "path": ["budget", "summary"],
              "query": [
                {
                  "key": "month",
                  "value": "7",
                  "description": "(Optional) Integer: Month number (1-12). If omitted, uses current month."
                },
                {
                  "key": "year",
                  "value": "2024",
                  "description": "(Optional) Integer: Year (e.g., 2024). If omitted, uses current year."
                },
                {
                  "key": "duration",
                  "value": "thisMonth",
                  "description": "(Optional) String: Can be used instead of month/year (e.g., 'thisMonth', 'lastMonth', 'thisYear', 'YYYY-MM-DD,YYYY-MM-DD'). Takes precedence if provided."
                },
                {
                  "key": "startDate",
                  "value": "2024-07-01",
                  "description": "(Optional) String (YYYY-MM-DD): Start date for custom range (used if duration=custom).",
                  "disabled": true
                },
                {
                  "key": "endDate",
                  "value": "2024-07-31",
                  "description": "(Optional) String (YYYY-MM-DD): End date for custom range (used if duration=custom).",
                  "disabled": true
                }
              ]
            },
            "description": "Retrieves a summary of budgeted amounts vs actual spending for each category budgeted in a specific period (defaults to current month if no params specified). Accepts `month`+`year` OR `duration`.\n\n**Authentication:** Required (`Bearer Token`).\n\n**Query Parameters:**\n*   `month`, `year`: Specify the period.\n*   `duration`: Alternatively specify period using keywords or custom range.\n*   `startDate`, `endDate`: Used only if `duration=custom`.\n\n**Responses:**\n*   `200 OK`: Returns an array of summary objects.\n*   `400 Bad Request`: Invalid date/duration parameters.\n*   `401 Unauthorized`/`403 Forbidden`: Invalid or missing token.\n*   `500 Internal Server Error`: Database error."
          },
          "response": [
            {
              "name": "Success - Budget Summary",
              "originalRequest": {},
              "status": "OK",
              "code": 200,
              "_postman_previewlanguage": "json",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "cookie": [],
              "body": "[\n    {\n        \"category\": \"01f0z7v5-a1b2-c3d4-e5f6-78901234567a\",\n        \"categoryName\": \"Groceries\",\n        \"budgetedAmount\": 300.00,\n        \"actualSpend\": 185.50\n    },\n    {\n        \"category\": \"01f0z7v5-a1b2-c3d4-e5f6-78901234567f\",\n        \"categoryName\": \"Eating Out\",\n        \"budgetedAmount\": 150.00,\n        \"actualSpend\": 165.20\n    }\n]"
            }
          ]
        },
        {
          "name": "Get Budget Progress",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{auth_token}}",
                "type": "text",
                "description": "JWT token obtained from login."
              }
            ],
            "url": {
              "raw": "{{base_url}}/budget/:budgetId/progress",
              "host": ["{{base_url}}"],
              "path": ["budget", ":budgetId", "progress"],
              "variable": [
                {
                  "key": "budgetId",
                  "value": "01h5e1f2-g3h4-i5j6-k7l8-m9n0o1p2q3r4",
                  "description": "(Required) The UUID of the specific budget record."
                }
              ]
            },
            "description": "Calculates the progress (spending vs budget) for a single, specific budget record (identified by its unique ID).\n\n**Authentication:** Required (`Bearer Token`).\n\n**Path Variable:**\n*   `budgetId` (UUID, required): ID of the budget record.\n\n**Responses:**\n*   `200 OK`: Returns budget details, spending, remaining amount, and progress percentage.\n*   `404 Not Found`: Budget record not found or not owned by the user.\n*   `401 Unauthorized`/`403 Forbidden`: Invalid or missing token.\n*   `500 Internal Server Error`: Database error."
          },
          "response": [
            {
              "name": "Success - Budget Progress",
              "originalRequest": {},
              "status": "OK",
              "code": 200,
              "_postman_previewlanguage": "json",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "cookie": [],
              "body": "{\n    \"budgetId\": \"01h5e1f2-g3h4-i5j6-k7l8-m9n0o1p2q3r4\",\n    \"categoryName\": \"Groceries\",\n    \"budgetedAmount\": 300.00,\n    \"totalSpent\": 185.50,\n    \"remainingAmount\": 114.50,\n    \"progress\": 61.83\n}"
            }
          ]
        }
      ]
    },
    {
      "name": "Saving Goals",
      "description": "Endpoints for managing user saving goals.",
      "item": [
        {
          "name": "Create Saving Goal",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{auth_token}}",
                "type": "text",
                "description": "JWT token obtained from login."
              },
              {
                "key": "Content-Type",
                "value": "application/json",
                "type": "text"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"name\": \"Vacation Fund\",\n    \"targetAmount\": 2000.00,\n    \"targetDate\": \"2025-06-30T23:59:59.000Z\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{base_url}}/goal",
              "host": ["{{base_url}}"],
              "path": ["goal"]
            },
            "description": "Creates a new saving goal for the authenticated user.\n\n**Authentication:** Required (`Bearer Token`).\n\n**Body (JSON):**\n*   `name` (string, required): Name of the saving goal.\n*   `targetAmount` (number, required): The total amount to save.\n*   `targetDate` (ISO Date string, required): The target date to reach the goal.\n\n**Responses:**\n*   `201 Created`: Goal created successfully, returns the new goal object.\n*   `400 Bad Request`: Validation failed.\n*   `401 Unauthorized`/`403 Forbidden`: Invalid or missing token.\n*   `500 Internal Server Error`: Database error."
          },
          "response": [
            {
              "name": "Success - Goal Created",
              "originalRequest": {},
              "status": "Created",
              "code": 201,
              "_postman_previewlanguage": "json",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "cookie": [],
              "body": "{\n    \"message\": \"Saving goal created successfully\",\n    \"data\": {\n        \"id\": \"01h6e1a2-b3c4-d5e6-f7g8-h9i0j1k2l3m4\",\n        \"createdAt\": \"2024-07-21T12:15:00.987Z\",\n        \"updatedAt\": null,\n        \"userId\": \"01exdcba-f100-7000-8f61-daac05c5c78e\",\n        \"name\": \"Vacation Fund\",\n        \"targetAmount\": 2000.00,\n        \"savedAmount\": 0,\n        \"targetDate\": \"2025-06-30T23:59:59.000Z\"\n    }\n}"
            }
          ]
        },
        {
          "name": "Get All Saving Goals",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{auth_token}}",
                "type": "text",
                "description": "JWT token obtained from login."
              }
            ],
            "url": {
              "raw": "{{base_url}}/goal/all?page=1&limit=10&sortBy=targetDate&sortOrder=asc",
              "host": ["{{base_url}}"],
              "path": ["goal", "all"],
              "query": [
                {
                  "key": "page",
                  "value": "1",
                  "description": "(Optional) Integer: Page number (default: 1)."
                },
                {
                  "key": "limit",
                  "value": "10",
                  "description": "(Optional) Integer: Items per page (default: 10)."
                },
                {
                  "key": "sortBy",
                  "value": "targetDate",
                  "description": "(Optional) String: Field to sort by (e.g., 'name', 'targetAmount', 'targetDate', 'createdAt'). Default: 'createdAt'."
                },
                {
                  "key": "sortOrder",
                  "value": "asc",
                  "description": "(Optional) String: Sort order ('asc', 'desc'). Default: 'desc'."
                }
              ]
            },
            "description": "Retrieves a list of all saving goals created by the authenticated user. Supports pagination and sorting.\n\n**Authentication:** Required (`Bearer Token`).\n\n**Responses:**\n*   `200 OK`: Returns a list of goals and pagination info.\n*   `401 Unauthorized`/`403 Forbidden`: Invalid or missing token.\n*   `500 Internal Server Error`: Database error."
          },
          "response": [
            {
              "name": "Success - Goals List",
              "originalRequest": {},
              "status": "OK",
              "code": 200,
              "_postman_previewlanguage": "json",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "cookie": [],
              "body": "{\n    \"data\": [\n        {\n            \"id\": \"01h6e1a2-b3c4-d5e6-f7g8-h9i0j1k2l3m4\",\n            \"createdAt\": \"2024-07-21T12:15:00.987Z\",\n            \"updatedAt\": \"2024-07-21T12:20:00.123Z\",\n            \"userId\": \"01exdcba-f100-7000-8f61-daac05c5c78e\",\n            \"name\": \"New Car Fund\",\n            \"targetAmount\": 15000.00,\n            \"savedAmount\": 1500.00,\n            \"targetDate\": \"2026-12-31T23:59:59.000Z\"\n        }\n    ],\n    \"pagination\": {\n        \"total\": 3,\n        \"totalPages\": 1,\n        \"page\": 1,\n        \"limit\": 10\n    }\n}"
            }
          ]
        },
        {
          "name": "Update Saving Goal",
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{auth_token}}",
                "type": "text",
                "description": "JWT token obtained from login."
              },
              {
                "key": "Content-Type",
                "value": "application/json",
                "type": "text"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"name\": \"New Car Fund\",\n    \"targetAmount\": 15000.00,\n    \"targetDate\": \"2026-12-31T23:59:59.000Z\",\n    \"savedAmount\": 550.00 \n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{base_url}}/goal/:goalId",
              "host": ["{{base_url}}"],
              "path": ["goal", ":goalId"],
              "variable": [
                {
                  "key": "goalId",
                  "value": "01h6e1a2-b3c4-d5e6-f7g8-h9i0j1k2l3m4",
                  "description": "(Required) The UUID of the saving goal to update."
                }
              ]
            },
            "description": "Updates the details (name, target amount, target date, or saved amount) of an existing saving goal owned by the authenticated user.\n\n**Authentication:** Required (`Bearer Token`).\n\n**Path Variable:**\n*   `goalId` (UUID, required): ID of the goal to update.\n\n**Body (JSON):** Provide only the fields to update.\n*   `name` (string, optional): New name.\n*   `targetAmount` (number, optional): New target amount (must be > 0).\n*   `targetDate` (ISO Date string | null, optional): New target date or null to remove.\n*   `savedAmount` (number, optional): Manually set the current saved amount (must be >= 0).\n\n**Responses:**\n*   `200 OK`: Goal updated successfully.\n*   `400 Bad Request`: Validation failed.\n*   `401 Unauthorized`/`403 Forbidden`: Invalid token or not owner.\n*   `404 Not Found`: Goal not found.\n*   `500 Internal Server Error`: Database error."
          },
          "response": [
            {
              "name": "Success - Goal Updated",
              "originalRequest": {},
              "status": "OK",
              "code": 200,
              "_postman_previewlanguage": "json",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "cookie": [],
              "body": "{\n    \"message\": \"Goal updated successfully!\",\n    \"id\": \"01h6e1a2-b3c4-d5e6-f7g8-h9i0j1k2l3m4\"\n}"
            }
          ]
        },
        {
          "name": "Add Amount to Goal",
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{auth_token}}",
                "type": "text",
                "description": "JWT token obtained from login."
              },
              {
                "key": "Content-Type",
                "value": "application/json",
                "type": "text"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"amount\": 100.00\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{base_url}}/goal/:goalId/add-amount",
              "host": ["{{base_url}}"],
              "path": ["goal", ":goalId", "add-amount"],
              "variable": [
                {
                  "key": "goalId",
                  "value": "01h6e1a2-b3c4-d5e6-f7g8-h9i0j1k2l3m4",
                  "description": "(Required) The UUID of the saving goal."
                }
              ]
            },
            "description": "Adds a specified amount to the `savedAmount` of a saving goal.\n\n**Authentication:** Required (`Bearer Token`).\n\n**Path Variable:**\n*   `goalId` (UUID, required): ID of the goal.\n\n**Body (JSON):**\n*   `amount` (number, required): The amount to add (must be positive).\n\n**Responses:**\n*   `200 OK`: Amount added successfully, returns new saved amount.\n*   `400 Bad Request`: Invalid amount.\n*   `401 Unauthorized`/`403 Forbidden`: Invalid token or not owner.\n*   `404 Not Found`: Goal not found.\n*   `500 Internal Server Error`: Database error."
          },
          "response": [
            {
              "name": "Success - Amount Added",
              "originalRequest": {},
              "status": "OK",
              "code": 200,
              "_postman_previewlanguage": "json",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "cookie": [],
              "body": "{\n    \"message\": \"Amount added successfully!\",\n    \"id\": \"01h6e1a2-b3c4-d5e6-f7g8-h9i0j1k2l3m4\",\n    \"newSavedAmount\": 650.00\n}"
            }
          ]
        },
        {
          "name": "Withdraw Amount from Goal",
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{auth_token}}",
                "type": "text",
                "description": "JWT token obtained from login."
              },
              {
                "key": "Content-Type",
                "value": "application/json",
                "type": "text"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"amount\": 50.00\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{base_url}}/goal/:goalId/withdraw-amount",
              "host": ["{{base_url}}"],
              "path": ["goal", ":goalId", "withdraw-amount"],
              "variable": [
                {
                  "key": "goalId",
                  "value": "01h6e1a2-b3c4-d5e6-f7g8-h9i0j1k2l3m4",
                  "description": "(Required) The UUID of the saving goal."
                }
              ]
            },
            "description": "Withdraws a specified amount from the `savedAmount` of a saving goal. The `savedAmount` cannot go below zero.\n\n**Authentication:** Required (`Bearer Token`).\n\n**Path Variable:**\n*   `goalId` (UUID, required): ID of the goal.\n\n**Body (JSON):**\n*   `amount` (number, required): The amount to withdraw (must be positive).\n\n**Responses:**\n*   `200 OK`: Amount withdrawn successfully, returns new saved amount.\n*   `400 Bad Request`: Invalid amount or insufficient saved amount.\n*   `401 Unauthorized`/`403 Forbidden`: Invalid token or not owner.\n*   `404 Not Found`: Goal not found.\n*   `500 Internal Server Error`: Database error."
          },
          "response": [
            {
              "name": "Success - Amount Withdrawn",
              "originalRequest": {},
              "status": "OK",
              "code": 200,
              "_postman_previewlanguage": "json",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "cookie": [],
              "body": "{\n    \"message\": \"Amount withdrawn successfully!\",\n    \"id\": \"01h6e1a2-b3c4-d5e6-f7g8-h9i0j1k2l3m4\",\n    \"newSavedAmount\": 600.00\n}"
            }
          ]
        },
        {
          "name": "Delete Saving Goal",
          "request": {
            "method": "DELETE",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{auth_token}}",
                "type": "text",
                "description": "JWT token obtained from login."
              }
            ],
            "url": {
              "raw": "{{base_url}}/goal/:goalId",
              "host": ["{{base_url}}"],
              "path": ["goal", ":goalId"],
              "variable": [
                {
                  "key": "goalId",
                  "value": "01h6e1a2-b3c4-d5e6-f7g8-h9i0j1k2l3m4",
                  "description": "(Required) The UUID of the saving goal to delete."
                }
              ]
            },
            "description": "Deletes a saving goal owned by the authenticated user.\n\n**Authentication:** Required (`Bearer Token`).\n\n**Path Variable:**\n*   `goalId` (UUID, required): ID of the goal to delete.\n\n**Responses:**\n*   `200 OK`: Goal deleted successfully.\n*   `401 Unauthorized`/`403 Forbidden`: Invalid token or not owner.\n*   `404 Not Found`: Goal not found.\n*   `500 Internal Server Error`: Database error."
          },
          "response": [
            {
              "name": "Success - Goal Deleted",
              "originalRequest": {},
              "status": "OK",
              "code": 200,
              "_postman_previewlanguage": "json",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "cookie": [],
              "body": "{\n    \"message\": \"Saving Goal Deleted successfully!\"\n}"
            }
          ]
        }
      ]
    },
    {
      "name": "Investment Accounts",
      "description": "Endpoints for managing investment accounts (e.g., brokerage accounts).",
      "item": [
        {
          "name": "Create Investment Account",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{auth_token}}",
                "type": "text",
                "description": "JWT token obtained from login."
              },
              {
                "key": "Content-Type",
                "value": "application/json",
                "type": "text"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"name\": \"My Brokerage Account\",\n    \"platform\": \"Fidelity\",\n    \"currency\": \"USD\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{base_url}}/investmentAccount",
              "host": ["{{base_url}}"],
              "path": ["investmentAccount"]
            },
            "description": "Creates a new investment account for the authenticated user.\n\n**Authentication:** Required (`Bearer Token`).\n\n**Body (JSON):**\n*   `name` (string, required): Name of the investment account.\n*   `platform` (string, required): Name of the brokerage or platform.\n*   `currency` (string, required): 3-letter currency code for the account.\n\n**Responses:**\n*   `201 Created`: Account created successfully, returns the new account object.\n*   `400 Bad Request`: Validation failed.\n*   `401 Unauthorized`/`403 Forbidden`: Invalid or missing token.\n*   `409 Conflict`: An investment account with this name already exists.\n*   `500 Internal Server Error`: Database error."
          },
          "response": [
            {
              "name": "Success - Investment Account Created",
              "originalRequest": {},
              "status": "Created",
              "code": 201,
              "_postman_previewlanguage": "json",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "cookie": [],
              "body": "{\n    \"message\": \"Investment account created successfully\",\n    \"data\": {\n        \"id\": \"01i7f2b3-d4e5-f6g7-h8i9-j0k1l2m3n4o5\",\n        \"createdAt\": \"2024-07-21T12:30:00.456Z\",\n        \"updatedAt\": null,\n        \"userId\": \"01exdcba-f100-7000-8f61-daac05c5c78e\",\n        \"name\": \"My Brokerage Account\",\n        \"platform\": \"Fidelity\",\n        \"balance\": 0,\n        \"currency\": \"USD\"\n    }\n}"
            }
          ]
        },
        {
          "name": "Get All Investment Accounts",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{auth_token}}",
                "type": "text",
                "description": "JWT token obtained from login."
              }
            ],
            "url": {
              "raw": "{{base_url}}/investmentAccount/all?page=1&limit=5&sortBy=name&sortOrder=asc",
              "host": ["{{base_url}}"],
              "path": ["investmentAccount", "all"],
              "query": [
                {
                  "key": "page",
                  "value": "1",
                  "description": "(Optional) Integer: Page number (default: 1)."
                },
                {
                  "key": "limit",
                  "value": "5",
                  "description": "(Optional) Integer: Items per page (default: 10)."
                },
                {
                  "key": "sortBy",
                  "value": "name",
                  "description": "(Optional) Sort field (e.g., 'name', 'platform', 'createdAt'). Default: 'createdAt'."
                },
                {
                  "key": "sortOrder",
                  "value": "asc",
                  "description": "(Optional) Sort order ('asc', 'desc'). Default: 'desc'."
                }
              ]
            },
            "description": "Retrieves a list of all investment accounts created by the authenticated user. Supports pagination and sorting.\n\n**Authentication:** Required (`Bearer Token`).\n\n**Responses:**\n*   `200 OK`: Returns a list of investment accounts and pagination info.\n*   `401 Unauthorized`/`403 Forbidden`: Invalid or missing token.\n*   `500 Internal Server Error`: Database error."
          },
          "response": [
            {
              "name": "Success - Investment Accounts List",
              "originalRequest": {},
              "status": "OK",
              "code": 200,
              "_postman_previewlanguage": "json",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "cookie": [],
              "body": "{\n    \"data\": [\n        {\n            \"id\": \"01i7f2b3-d4e5-f6g7-h8i9-j0k1l2m3n4o5\",\n            \"createdAt\": \"2024-07-21T12:30:00.456Z\",\n            \"updatedAt\": null,\n            \"userId\": \"01exdcba-f100-7000-8f61-daac05c5c78e\",\n            \"name\": \"My Brokerage Account\",\n            \"platform\": \"Fidelity\",\n            \"balance\": 0, \n            \"currency\": \"USD\"\n        }\n    ],\n    \"pagination\": {\n        \"total\": 2,\n        \"totalPages\": 1,\n        \"page\": 1,\n        \"limit\": 5\n    }\n}"
            }
          ]
        },
        {
          "name": "Get Investment Account Details",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{auth_token}}",
                "type": "text",
                "description": "JWT token obtained from login."
              }
            ],
            "url": {
              "raw": "{{base_url}}/investmentAccount/:accountId",
              "host": ["{{base_url}}"],
              "path": ["investmentAccount", ":accountId"],
              "variable": [
                {
                  "key": "accountId",
                  "value": "01i7f2b3-d4e5-f6g7-h8i9-j0k1l2m3n4o5",
                  "description": "(Required) The UUID of the investment account."
                }
              ]
            },
            "description": "Retrieves the details of a specific investment account owned by the authenticated user.\n\n**Authentication:** Required (`Bearer Token`).\n\n**Path Variable:**\n*   `accountId` (UUID, required): ID of the investment account.\n\n**Responses:**\n*   `200 OK`: Returns the investment account details.\n*   `404 Not Found`: Account not found or not owned by user.\n*   `401 Unauthorized`/`403 Forbidden`: Invalid or missing token.\n*   `500 Internal Server Error`: Database error."
          },
          "response": [
            {
              "name": "Success - Investment Account Details",
              "originalRequest": {},
              "status": "OK",
              "code": 200,
              "_postman_previewlanguage": "json",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "cookie": [],
              "body": "{\n    \"id\": \"01i7f2b3-d4e5-f6g7-h8i9-j0k1l2m3n4o5\",\n    \"createdAt\": \"2024-07-21T12:30:00.456Z\",\n    \"updatedAt\": \"2024-07-21T12:35:00.123Z\",\n    \"userId\": \"01exdcba-f100-7000-8f61-daac05c5c78e\",\n    \"name\": \"My Brokerage Account (Updated)\",\n    \"platform\": \"Schwab\",\n    \"balance\": 0,\n    \"currency\": \"USD\"\n}"
            }
          ]
        },
        {
          "name": "Update Investment Account",
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{auth_token}}",
                "type": "text",
                "description": "JWT token obtained from login."
              },
              {
                "key": "Content-Type",
                "value": "application/json",
                "type": "text"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"name\": \"My Brokerage Account (Updated)\",\n    \"platform\": \"Schwab\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{base_url}}/investmentAccount/:accountId",
              "host": ["{{base_url}}"],
              "path": ["investmentAccount", ":accountId"],
              "variable": [
                {
                  "key": "accountId",
                  "value": "01i7f2b3-d4e5-f6g7-h8i9-j0k1l2m3n4o5",
                  "description": "(Required) The UUID of the investment account to update."
                }
              ]
            },
            "description": "Updates the name and platform of an existing investment account owned by the authenticated user.\n\n**Authentication:** Required (`Bearer Token`).\n\n**Path Variable:**\n*   `accountId` (UUID, required): ID of the account to update.\n\n**Body (JSON):**\n*   `name` (string, optional): New name.\n*   `platform` (string, optional): New platform.\n\n**Responses:**\n*   `200 OK`: Account updated successfully.\n*   `400 Bad Request`: Validation failed or no changes provided.\n*   `401 Unauthorized`/`403 Forbidden`: Invalid token or not owner.\n*   `404 Not Found`: Account not found.\n*   `409 Conflict`: Another account with the same name already exists.\n*   `500 Internal Server Error`: Database error."
          },
          "response": [
            {
              "name": "Success - Investment Account Updated",
              "originalRequest": {},
              "status": "OK",
              "code": 200,
              "_postman_previewlanguage": "json",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "cookie": [],
              "body": "{\n    \"message\": \"Investment Account updated successfully\",\n    \"id\": \"01i7f2b3-d4e5-f6g7-h8i9-j0k1l2m3n4o5\"\n}"
            }
          ]
        },
        {
          "name": "Delete Investment Account",
          "request": {
            "method": "DELETE",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{auth_token}}",
                "type": "text",
                "description": "JWT token obtained from login."
              }
            ],
            "url": {
              "raw": "{{base_url}}/investmentAccount/:accountId",
              "host": ["{{base_url}}"],
              "path": ["investmentAccount", ":accountId"],
              "variable": [
                {
                  "key": "accountId",
                  "value": "01i7f2b3-d4e5-f6g7-h8i9-j0k1l2m3n4o5",
                  "description": "(Required) The UUID of the investment account to delete."
                }
              ]
            },
            "description": "**DANGER ZONE:** Deletes an investment account and **all associated investments** within it (due to `onDelete: 'cascade'`). This action is irreversible.\n\n**Authentication:** Required (`Bearer Token`).\n\n**Path Variable:**\n*   `accountId` (UUID, required): ID of the account to delete.\n\n**Responses:**\n*   `200 OK`: Account deleted successfully.\n*   `401 Unauthorized`/`403 Forbidden`: Invalid token or not owner.\n*   `404 Not Found`: Account not found.\n*   `500 Internal Server Error`: Database error."
          },
          "response": [
            {
              "name": "Success - Investment Account Deleted",
              "originalRequest": {},
              "status": "OK",
              "code": 200,
              "_postman_previewlanguage": "json",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "cookie": [],
              "body": "{\n    \"message\": \"Investment Account and associated investments deleted successfully!\"\n}"
            }
          ]
        },
        {
          "name": "Get Investment Account Summary",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{auth_token}}",
                "type": "text",
                "description": "JWT token obtained from login."
              }
            ],
            "url": {
              "raw": "{{base_url}}/investmentAccount/:accountId/summary",
              "host": ["{{base_url}}"],
              "path": ["investmentAccount", ":accountId", "summary"],
              "variable": [
                {
                  "key": "accountId",
                  "value": "01i7f2b3-d4e5-f6g7-h8i9-j0k1l2m3n4o5",
                  "description": "(Required) The UUID of the investment account."
                }
              ]
            },
            "description": "Calculates a summary for a specific investment account, including total invested amount, total dividends received, and the combined total value within that account.\n\n**Authentication:** Required (`Bearer Token`).\n\n**Path Variable:**\n*   `accountId` (UUID, required): ID of the account.\n\n**Responses:**\n*   `200 OK`: Returns the summary data.\n*   `404 Not Found`: Account not found or has no investments.\n*   `401 Unauthorized`/`403 Forbidden`: Invalid token or not owner.\n*   `500 Internal Server Error`: Database error."
          },
          "response": [
            {
              "name": "Success - Account Summary",
              "originalRequest": {},
              "status": "OK",
              "code": 200,
              "_postman_previewlanguage": "json",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "cookie": [],
              "body": "{\n    \"accountId\": \"01i7f2b3-d4e5-f6g7-h8i9-j0k1l2m3n4o5\",\n    \"accountname\": \"My Brokerage Account (Updated)\",\n    \"currency\": \"USD\",\n    \"platform\": \"Schwab\",\n    \"totalinvestment\": 11000.00,\n    \"totaldividend\": 150.00,\n    \"totalvalue\": 11150.00\n}"
            }
          ]
        }
      ]
    },
    {
      "name": "Investments",
      "description": "Endpoints for managing individual investments (holdings) within investment accounts. Includes CRUD, dividend updates, portfolio views, and stock searching/pricing via Yahoo Finance.",
      "item": [
        {
          "name": "Create Investment",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{auth_token}}",
                "type": "text",
                "description": "JWT token obtained from login."
              },
              {
                "key": "Content-Type",
                "value": "application/json",
                "type": "text"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"symbol\": \"AAPL\",\n    \"shares\": 10,\n    \"purchasePrice\": 150.00,\n    \"purchaseDate\": \"2023-05-15T10:00:00.000Z\",\n    \"investmentAccount\": \"01i7f2b3-d4e5-f6g7-h8i9-j0k1l2m3n4o5\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{base_url}}/investment",
              "host": ["{{base_url}}"],
              "path": ["investment"]
            },
            "description": "Adds a new investment holding to a specified investment account. Updates the parent investment account's balance.\n\n**Authentication:** Required (`Bearer Token`).\n\n**Body (JSON):**\n*   `symbol` (string, required): Stock ticker symbol (e.g., 'AAPL').\n*   `shares` (number, required): Number of shares purchased (must be > 0).\n*   `purchasePrice` (number, required): Price per share at purchase (must be >= 0).\n*   `purchaseDate` (ISO Date string, required): Date of purchase.\n*   `investmentAccount` (UUID string, required): ID of the investment account this holding belongs to.\n\n**Responses:**\n*   `201 Created`: Investment created successfully, returns the new investment object.\n*   `400 Bad Request`: Validation failed (invalid shares/price).\n*   `403 Forbidden`/`404 Not Found`: Investment account not found or not owned by the user.\n*   `401 Unauthorized`: Invalid or missing token.\n*   `500 Internal Server Error`: Database error."
          },
          "response": [
            {
              "name": "Success - Investment Created",
              "originalRequest": {},
              "status": "Created",
              "code": 201,
              "_postman_previewlanguage": "json",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "cookie": [],
              "body": "{\n    \"message\": \"Investment created and account balance updated successfully\",\n    \"data\": {\n        \"id\": \"01j8g3c4-e5f6-g7h8-i9j0-k1l2m3n4o5p6\",\n        \"createdAt\": \"2024-07-21T12:40:00.789Z\",\n        \"updatedAt\": null,\n        \"account\": \"01i7f2b3-d4e5-f6g7-h8i9-j0k1l2m3n4o5\",\n        \"symbol\": \"AAPL\",\n        \"shares\": 10.0,\n        \"purchasePrice\": 150.00,\n        \"purchaseDate\": \"2023-05-15T10:00:00.000Z\",\n        \"dividend\": 0,\n        \"investedAmount\": 1500.00\n    }\n}"
            }
          ]
        },
        {
          "name": "Get Investments by Account",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{auth_token}}",
                "type": "text",
                "description": "JWT token obtained from login."
              }
            ],
            "url": {
              "raw": "{{base_url}}/investment/:accountId?page=1&limit=10&sortBy=symbol&sortOrder=asc",
              "host": ["{{base_url}}"],
              "path": ["investment", ":accountId"],
              "query": [
                {
                  "key": "page",
                  "value": "1",
                  "description": "(Optional) Integer: Page number (default: 1)."
                },
                {
                  "key": "limit",
                  "value": "10",
                  "description": "(Optional) Integer: Items per page (default: 10)."
                },
                {
                  "key": "sortBy",
                  "value": "symbol",
                  "description": "(Optional) Field to sort by (e.g., 'symbol', 'purchaseDate', 'investedAmount'). Default: 'purchaseDate'."
                },
                {
                  "key": "sortOrder",
                  "value": "asc",
                  "description": "(Optional) Sort order ('asc', 'desc'). Default: 'desc'."
                }
              ],
              "variable": [
                {
                  "key": "accountId",
                  "value": "01i7f2b3-d4e5-f6g7-h8i9-j0k1l2m3n4o5",
                  "description": "(Required) The UUID of the investment account."
                }
              ]
            },
            "description": "Retrieves a list of all investment holdings within a specific investment account owned by the authenticated user. Supports pagination and sorting.\n\n**Authentication:** Required (`Bearer Token`).\n\n**Path Variable:**\n*   `accountId` (UUID, required): ID of the investment account.\n\n**Responses:**\n*   `200 OK`: Returns a list of investments and pagination info.\n*   `404 Not Found`: Investment account not found or not owned.\n*   `401 Unauthorized`/`403 Forbidden`: Invalid or missing token.\n*   `500 Internal Server Error`: Database error."
          },
          "response": [
            {
              "name": "Success - Investments List",
              "originalRequest": {},
              "status": "OK",
              "code": 200,
              "_postman_previewlanguage": "json",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "cookie": [],
              "body": "{\n    \"data\": [\n        {\n            \"id\": \"01j8g3c4-e5f6-g7h8-i9j0-k1l2m3n4o5p6\",\n            \"createdAt\": \"2024-07-21T12:40:00.789Z\",\n            \"updatedAt\": \"2024-07-21T12:45:00.123Z\",\n            \"account\": \"01i7f2b3-d4e5-f6g7-h8i9-j0k1l2m3n4o5\",\n            \"symbol\": \"MSFT\",\n            \"shares\": 5.0,\n            \"purchasePrice\": 300.00,\n            \"purchaseDate\": \"2023-10-01T14:30:00.000Z\",\n            \"dividend\": 10.00,\n            \"investedAmount\": 1500.00\n        }\n    ],\n    \"pagination\": {\n        \"total\": 3,\n        \"totalPages\": 1,\n        \"page\": 1,\n        \"limit\": 10\n    }\n}"
            }
          ]
        },
        {
          "name": "Get Investment Details",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{auth_token}}",
                "type": "text",
                "description": "JWT token obtained from login."
              }
            ],
            "url": {
              "raw": "{{base_url}}/investment/details/:investmentId",
              "host": ["{{base_url}}"],
              "path": ["investment", "details", ":investmentId"],
              "variable": [
                {
                  "key": "investmentId",
                  "value": "01j8g3c4-e5f6-g7h8-i9j0-k1l2m3n4o5p6",
                  "description": "(Required) The UUID of the specific investment holding."
                }
              ]
            },
            "description": "Retrieves the details of a single investment holding, ensuring the authenticated user owns the parent investment account.\n\n**Authentication:** Required (`Bearer Token`).\n\n**Path Variable:**\n*   `investmentId` (UUID, required): ID of the investment holding.\n\n**Responses:**\n*   `200 OK`: Returns the investment details.\n*   `404 Not Found`: Investment not found.\n*   `403 Forbidden`: User does not own the parent account.\n*   `401 Unauthorized`: Invalid or missing token.\n*   `500 Internal Server Error`: Database error."
          },
          "response": [
            {
              "name": "Success - Investment Details",
              "originalRequest": {},
              "status": "OK",
              "code": 200,
              "_postman_previewlanguage": "json",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "cookie": [],
              "body": "{\n    \"investment\": {\n        \"id\": \"01j8g3c4-e5f6-g7h8-i9j0-k1l2m3n4o5p6\",\n        \"createdAt\": \"2024-07-21T12:40:00.789Z\",\n        \"updatedAt\": \"2024-07-21T12:45:00.123Z\",\n        \"symbol\": \"MSFT\",\n        \"shares\": 5.0,\n        \"purchasePrice\": 300.00,\n        \"purchaseDate\": \"2023-10-01T14:30:00.000Z\",\n        \"dividend\": 10.00,\n        \"investedAmount\": 1500.00\n    }\n}"
            }
          ]
        },
        {
          "name": "Update Investment",
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{auth_token}}",
                "type": "text",
                "description": "JWT token obtained from login."
              },
              {
                "key": "Content-Type",
                "value": "application/json",
                "type": "text"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"shares\": 5.0,\n    \"purchasePrice\": 300.00,\n    \"purchaseDate\": \"2023-10-01T14:30:00.000Z\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{base_url}}/investment/:investmentId",
              "host": ["{{base_url}}"],
              "path": ["investment", ":investmentId"],
              "variable": [
                {
                  "key": "investmentId",
                  "value": "01j8g3c4-e5f6-g7h8-i9j0-k1l2m3n4o5p6",
                  "description": "(Required) The UUID of the investment holding to update."
                }
              ]
            },
            "description": "Updates the details (shares, purchase price, purchase date) of an existing investment holding. Recalculates `investedAmount` and updates the parent investment account's balance based on the change in invested amount.\n\n**Authentication:** Required (`Bearer Token`).\n\n**Path Variable:**\n*   `investmentId` (UUID, required): ID of the investment.\n\n**Body (JSON):**\n*   `shares` (number, required): New number of shares (> 0).\n*   `purchasePrice` (number, required): New purchase price per share (>= 0).\n*   `purchaseDate` (ISO Date string, required): New purchase date.\n\n**Responses:**\n*   `200 OK`: Investment updated successfully.\n*   `400 Bad Request`: Validation failed.\n*   `403 Forbidden`: User does not own the parent account.\n*   `404 Not Found`: Investment not found.\n*   `401 Unauthorized`: Invalid or missing token.\n*   `500 Internal Server Error`: Database error."
          },
          "response": [
            {
              "name": "Success - Investment Updated",
              "originalRequest": {},
              "status": "OK",
              "code": 200,
              "_postman_previewlanguage": "json",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "cookie": [],
              "body": "{\n    \"message\": \"Investment record Updated successfully\",\n    \"id\": \"01j8g3c4-e5f6-g7h8-i9j0-k1l2m3n4o5p6\"\n}"
            }
          ]
        },
        {
          "name": "Update Investment Dividend",
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{auth_token}}",
                "type": "text",
                "description": "JWT token obtained from login."
              },
              {
                "key": "Content-Type",
                "value": "application/json",
                "type": "text"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"dividend\": 15.00\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{base_url}}/investment/:investmentId/update-dividend",
              "host": ["{{base_url}}"],
              "path": ["investment", ":investmentId", "update-dividend"],
              "variable": [
                {
                  "key": "investmentId",
                  "value": "01j8g3c4-e5f6-g7h8-i9j0-k1l2m3n4o5p6",
                  "description": "(Required) The UUID of the investment holding."
                }
              ]
            },
            "description": "Updates the total dividend received for a specific investment holding.\n\n**Authentication:** Required (`Bearer Token`).\n\n**Path Variable:**\n*   `investmentId` (UUID, required): ID of the investment.\n\n**Body (JSON):**\n*   `dividend` (number, required): The new total dividend amount (>= 0).\n\n**Responses:**\n*   `200 OK`: Dividend updated successfully.\n*   `400 Bad Request`: Invalid dividend amount.\n*   `403 Forbidden`: User does not own the parent account.\n*   `404 Not Found`: Investment not found.\n*   `401 Unauthorized`: Invalid or missing token.\n*   `500 Internal Server Error`: Database error."
          },
          "response": [
            {
              "name": "Success - Dividend Updated",
              "originalRequest": {},
              "status": "OK",
              "code": 200,
              "_postman_previewlanguage": "json",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "cookie": [],
              "body": "{\n    \"message\": \"Investment dividend updated successfully\",\n    \"id\": \"01j8g3c4-e5f6-g7h8-i9j0-k1l2m3n4o5p6\"\n}"
            }
          ]
        },
        {
          "name": "Delete Investment",
          "request": {
            "method": "DELETE",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{auth_token}}",
                "type": "text",
                "description": "JWT token obtained from login."
              }
            ],
            "url": {
              "raw": "{{base_url}}/investment/:investmentId",
              "host": ["{{base_url}}"],
              "path": ["investment", ":investmentId"],
              "variable": [
                {
                  "key": "investmentId",
                  "value": "01j8g3c4-e5f6-g7h8-i9j0-k1l2m3n4o5p6",
                  "description": "(Required) The UUID of the investment holding to delete."
                }
              ]
            },
            "description": "**DANGER ZONE:** Deletes an individual investment holding. Updates the parent investment account balance by subtracting the `investedAmount` of the deleted holding. This action is irreversible.\n\n**Authentication:** Required (`Bearer Token`).\n\n**Path Variable:**\n*   `investmentId` (UUID, required): ID of the investment to delete.\n\n**Responses:**\n*   `200 OK`: Investment deleted successfully.\n*   `403 Forbidden`: User does not own the parent account.\n*   `404 Not Found`: Investment not found.\n*   `401 Unauthorized`: Invalid or missing token.\n*   `500 Internal Server Error`: Database error."
          },
          "response": [
            {
              "name": "Success - Investment Deleted",
              "originalRequest": {},
              "status": "OK",
              "code": 200,
              "_postman_previewlanguage": "json",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "cookie": [],
              "body": "{\n    \"message\": \"Investment record Deleted Successfully!\"\n}"
            }
          ]
        },
        {
          "name": "Get Overall Portfolio Summary",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{auth_token}}",
                "type": "text",
                "description": "JWT token obtained from login."
              }
            ],
            "url": {
              "raw": "{{base_url}}/investment/portfolio-summary",
              "host": ["{{base_url}}"],
              "path": ["investment", "portfolio-summary"]
            },
            "description": "Calculates an overall summary of the user's entire investment portfolio across all accounts.\n\n**Process:**\n1. Fetches user's preferred currency.\n2. Fetches all user investment accounts and their investments.\n3. Fetches current market prices for all unique stock symbols using the Yahoo Finance API (concurrently).\n4. Aggregates total invested amount, total dividends, and estimated current market value.\n5. Calculates overall gain/loss and percentage.\n6. Determines if the market value is an estimate (due to missing prices or currency differences).\n\n**Authentication:** Required (`Bearer Token`).\n\n**Returns data in user's preferred currency.**\n\n**Responses:**\n*   `200 OK`: Returns the overall portfolio summary.\n*   `401 Unauthorized`/`403 Forbidden`: Invalid or missing token.\n*   `500 Internal Server Error`: Database error or error fetching/processing external stock data."
          },
          "response": [
            {
              "name": "Success - Portfolio Summary",
              "originalRequest": {},
              "status": "OK",
              "code": 200,
              "_postman_previewlanguage": "json",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "cookie": [],
              "body": "{\n    \"totalInvestedAmount\": 16000.00,\n    \"currentMarketValue\": 17550.50,\n \"totalDividends\": 65.00,\n    \"overallGainLoss\": 1550.50,\n    \"overallGainLossPercentage\": 9.69,\n    \"numberOfAccounts\": 2,\n    \"numberOfHoldings\": 5,\n    \"currency\": \"USD\",\n    \"valueIsEstimate\": true \n}"
            }
          ]
        },
        {
          "name": "Get Historical Portfolio Value",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{auth_token}}",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{base_url}}/investment/portfolio-historical?period=90d",
              "host": ["{{base_url}}"],
              "path": ["investment", "portfolio-historical"],
              "query": [
                {
                  "key": "period",
                  "value": "90d",
                  "description": "(Optional) Predefined period: '7d', '30d', '90d', '1y'. Defaults to '30d'. Use EITHER this OR startDate/endDate."
                },
                {
                  "key": "startDate",
                  "value": "2024-04-01",
                  "description": "(Optional) Start date (YYYY-MM-DD) for custom range. Required if endDate is provided.",
                  "disabled": true
                },
                {
                  "key": "endDate",
                  "value": "2024-06-30",
                  "description": "(Optional) End date (YYYY-MM-DD) for custom range. Required if startDate is provided.",
                  "disabled": true
                }
              ]
            },
            "description": "Calculates the estimated historical value of the user's entire portfolio over a specified period.\n\n**Process:**\n1. Fetches all user investments.\n2. Determines the date range based on `period` or `startDate`/`endDate`.\n3. Fetches historical closing prices for each unique symbol within the date range using the Yahoo Finance API.\n4. Calculates the portfolio value for each market day in the range based on holdings owned on that day and their historical prices.\n5. Determines if the value is an estimate (due to currency mixing or missing historical prices).\n\n**Authentication:** Required (`Bearer Token`).\n\n**Returns data in user's preferred currency.**\n\n**Responses:**\n*   `200 OK`: Returns an array of {date, value} objects, currency, and estimate flag.\n*   `400 Bad Request`: Invalid date range or period.\n*   `401 Unauthorized`/`403 Forbidden`: Invalid or missing token.\n*   `500 Internal Server Error`: Database error or error fetching/processing external stock data."
          },
          "response": [
            {
              "name": "Success - Historical Data",
              "originalRequest": {},
              "status": "OK",
              "code": 200,
              "_postman_previewlanguage": "json",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "cookie": [],
              "body": "{\n    \"data\": [\n        {\n            \"date\": \"2024-06-21\",\n            \"value\": 17450.25\n        },\n        {\n            \"date\": \"2024-06-24\",\n            \"value\": 17510.80\n        },\n        {\n            \"date\": \"2024-07-19\",\n            \"value\": 17550.50\n        }\n    ],\n    \"currency\": \"USD\",\n    \"valueIsEstimate\": true\n}"
            }
          ]
        },
        {
          "name": "Search Stocks",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{auth_token}}",
                "type": "text",
                "description": "JWT token obtained from login."
              }
            ],
            "url": {
              "raw": "{{base_url}}/investment/stocks/search?q=Tesla",
              "host": ["{{base_url}}"],
              "path": ["investment", "stocks", "search"],
              "query": [
                {
                  "key": "q",
                  "value": "Tesla",
                  "description": "(Required) String: The search query (stock symbol or company name)."
                }
              ]
            },
            "description": "Searches for stock symbols and company information using the Yahoo Finance API based on the provided query.\n\n**Authentication:** Required (`Bearer Token`).\n\n**Responses:**\n*   `200 OK`: Returns an array of matching stock quotes (symbol, name, exchange, type).\n*   `400 Bad Request`: Missing search query `q`.\n*   `401 Unauthorized`/`403 Forbidden`: Invalid or missing token.\n*   `5xx Server Error`/Other 4xx: Error communicating with the Yahoo Finance API or processing the response."
          },
          "response": [
            {
              "name": "Success - Stock Search Results",
              "originalRequest": {},
              "status": "OK",
              "code": 200,
              "_postman_previewlanguage": "json",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "cookie": [],
              "body": "[\n    {\n        \"symbol\": \"TSLA\",\n        \"name\": \"Tesla, Inc.\",\n        \"exchange\": \"NMS\",\n        \"type\": \"EQUITY\"\n    },\n    {\n        \"symbol\": \"TSLL\",\n        \"name\": \"Direxion Daily TSLA Bull 2X Shares\",\n        \"exchange\": \"NMS\",\n        \"type\": \"ETF\"\n    }\n]"
            }
          ]
        },
        {
          "name": "Get Stock Price",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{auth_token}}",
                "type": "text",
                "description": "JWT token obtained from login."
              }
            ],
            "url": {
              "raw": "{{base_url}}/investment/stocks/price/:symbol",
              "host": ["{{base_url}}"],
              "path": ["investment", "stocks", "price", ":symbol"],
              "variable": [
                {
                  "key": "symbol",
                  "value": "AAPL",
                  "description": "(Required) String: The stock ticker symbol to get the price for."
                }
              ]
            },
            "description": "Retrieves the latest market data (price, change, volume, etc.) for a specific stock symbol using the Yahoo Finance API.\n\n**Authentication:** Required (`Bearer Token`).\n\n**Path Variable:**\n*   `symbol` (string, required): Stock ticker symbol.\n\n**Responses:**\n*   `200 OK`: Returns detailed stock market data.\n*   `400 Bad Request`: Missing symbol.\n*   `404 Not Found`: Symbol not found or data unavailable from Yahoo Finance.\n*   `401 Unauthorized`/`403 Forbidden`: Invalid or missing token.\n*   `5xx Server Error`/Other 4xx: Error communicating with the Yahoo Finance API or processing the response."
          },
          "response": [
            {
              "name": "Success - Stock Price Data",
              "originalRequest": {},
              "status": "OK",
              "code": 200,
              "_postman_previewlanguage": "json",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "cookie": [],
              "body": "{\n    \"symbol\": \"AAPL\",\n    \"price\": 175.50,\n    \"change\": 1.25,\n    \"changePercent\": 0.72,\n    \"exchange\": \"NasdaqGS\",\n    \"currency\": \"USD\",\n    \"companyName\": \"Apple Inc.\",\n    \"marketState\": \"REGULAR\",\n    \"regularMarketTime\": \"2024-07-21T19:59:00.000Z\",\n    \"fiftyTwoWeekHigh\": 199.62,\n    \"fiftyTwoWeekLow\": 164.08,\n    \"regularMarketDayHigh\": 176.00,\n    \"regularMarketDayLow\": 174.80,\n    \"regularMarketVolume\": 55123456\n}"
            },
            {
              "name": "Error - Symbol Not Found",
              "originalRequest": {},
              "status": "Not Found",
              "code": 404,
              "_postman_previewlanguage": "json",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "cookie": [],
              "body": "{\n    \"message\": \"Data not found for symbol 'INVALIDSYMBOL' on Yahoo Finance.\",\n    \"status\": 404\n}"
            }
          ]
        },
        {
          "name": "Get Historical Stock Price",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{auth_token}}",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{base_url}}/investment/stocks/historical-price/:symbol?date=2024-07-15",
              "host": ["{{base_url}}"],
              "path": ["investment", "stocks", "historical-price", ":symbol"],
              "query": [
                {
                  "key": "date",
                  "value": "2024-07-15",
                  "description": "(Required) String: The date to fetch the historical price for (YYYY-MM-DD)."
                }
              ],
              "variable": [
                {
                  "key": "symbol",
                  "value": "AAPL",
                  "description": "(Required) String: Stock ticker symbol."
                }
              ]
            },
            "description": "Retrieves the historical closing price (and potentially other OHLCV data) for a specific stock symbol on a given date using the Yahoo Finance API.\n\n**Authentication:** Required (`Bearer Token`).\n\n**Path Variable:**\n*   `symbol` (string, required): Stock ticker symbol.\n\n**Query Parameter:**\n*   `date` (string, required): Date in YYYY-MM-DD format.\n\n**Responses:**\n*   `200 OK`: Returns historical price data for the date.\n*   `400 Bad Request`: Missing or invalid symbol or date.\n*   `404 Not Found`: No data available for the symbol on that date (e.g., market closed, invalid symbol).\n*   `401 Unauthorized`/`403 Forbidden`: Invalid or missing token.\n*   `5xx Server Error`/Other 4xx: Error communicating with the Yahoo Finance API or processing the response."
          },
          "response": [
            {
              "name": "Success - Historical Price",
              "originalRequest": {},
              "status": "OK",
              "code": 200,
              "_postman_previewlanguage": "json",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "cookie": [],
              "body": "{\n    \"symbol\": \"AAPL\",\n    \"date\": \"2024-07-15\",\n    \"price\": 173.25,\n    \"currency\": \"USD\",\n    \"exchange\": \"NasdaqGS\",\n    \"companyName\": \"Apple Inc.\"\n}"
            },
            {
              "name": "Error - No Data for Date",
              "originalRequest": {},
              "status": "Not Found",
              "code": 404,
              "_postman_previewlanguage": "json",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "cookie": [],
              "body": "{\n    \"message\": \"No historical data available for 'AAPL' on 2024-07-14. Market might have been closed.\",\n    \"status\": 404\n}"
            }
          ]
        },
        {
          "name": "Get Oldest Investment Date",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{auth_token}}",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{base_url}}/investment/oldest-date",
              "host": ["{{base_url}}"],
              "path": ["investment", "oldest-date"]
            },
            "description": "Finds the earliest `purchaseDate` among all investments associated with the authenticated user. Useful for setting the minimum date for historical portfolio charts.\n\n**Authentication:** Required (`Bearer Token`).\n\n**Responses:**\n*   `200 OK`: Returns an object with `oldestDate` (YYYY-MM-DD format) or `null` if no investments exist.\n*   `401 Unauthorized`/`403 Forbidden`: Invalid or missing token.\n*   `500 Internal Server Error`: Database error."
          },
          "response": [
            {
              "name": "Success - Oldest Date Found",
              "originalRequest": {},
              "status": "OK",
              "code": 200,
              "_postman_previewlanguage": "json",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "cookie": [],
              "body": "{\n    \"oldestDate\": \"2023-05-15\"\n}"
            },
            {
              "name": "Success - No Investments",
              "originalRequest": {},
              "status": "OK",
              "code": 200,
              "_postman_previewlanguage": "json",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "cookie": [],
              "body": "{\n    \"oldestDate\": null\n}"
            }
          ]
        }
      ]
    },
    {
      "name": "Debts & Interest",
      "description": "Endpoints for managing debts (loans, amounts owed/owing) and calculating interest.",
      "item": [
        {
          "name": "Create Debt Record",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{auth_token}}",
                "type": "text",
                "description": "JWT token obtained from login."
              },
              {
                "key": "Content-Type",
                "value": "application/json",
                "type": "text"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"amount\": 1000.00,\n    \"premiumAmount\": 50.00,\n    \"description\": \"Personal loan from John Doe\",\n    \"duration\": \"month\", \n    \"percentage\": 5.0,\n    \"frequency\": 12,\n    \"user\": \"01gabcde-fgh1-ijk2-lmn3-opq4rst5uvw6\",\n    \"type\": \"taken\",\n    \"interestType\": \"simple\",\n    \"account\": \"01fgy5q3-p8n7-m6l5-k4j3-h2g1f0e9d8c7\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{base_url}}/interest/debts",
              "host": ["{{base_url}}"],
              "path": ["interest", "debts"]
            },
            "description": "Creates a new debt record.\n\n**Authentication:** Required (`Bearer Token`).\n\n**Body (JSON):**\n*   `amount` (number, required): Principal amount.\n*   `premiumAmount` (number, optional): Additional fixed amount (e.g., processing fee).\n*   `description` (string, required): Description of the debt.\n*   `duration` (string, required): Basis for frequency/due date calculation ('day', 'week', 'month', 'year' or 'YYYY-MM-DD,YYYY-MM-DD' for fixed term).\n*   `percentage` (number, optional): Annual interest rate (default 0).\n*   `frequency` (string, optional): Number of duration units until due (e.g., if duration is 'month' and frequency is '12', due in 12 months). Required if duration is not a date range.\n*   `user` (UUID string, required): ID of the other party involved (lender/borrower).\n*   `type` (enum string, required): 'given' (you lent money) or 'taken' (you borrowed money).\n*   `interestType` (enum string, required): 'simple' or 'compound'.\n*   `account` (UUID string, required): Account associated with the debt (e.g., where money was received/paid from).\n\n**Responses:**\n*   `201 Created`: Debt created successfully, returns the new debt object.\n*   `400 Bad Request`: Validation failed (e.g., invalid amount, missing frequency for non-custom duration).\n*   `401 Unauthorized`/`403 Forbidden`: Invalid token.\n*   `404 Not Found`: Associated account or involved user not found.\n*   `500 Internal Server Error`: Database error."
          },
          "response": [
            {
              "name": "Success - Debt Created",
              "originalRequest": {},
              "status": "Created",
              "code": 201,
              "_postman_previewlanguage": "json",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "cookie": [],
              "body": "{\n    \"message\": \"Debt created successfully\",\n    \"data\": {\n        \"id\": \"01k9h4d5-f6g7-h8i9-j0k1-l2m3n4o5p6q7\",\n        \"createdAt\": \"2024-07-21T13:00:00.123Z\",\n        \"updatedAt\": null,\n        \"amount\": 1000.00,\n        \"premiumAmount\": 50.00,\n        \"createdBy\": \"01exdcba-f100-7000-8f61-daac05c5c78e\",\n        \"description\": \"Personal loan from John Doe\",\n        \"dueDate\": \"2025-07-21\",\n        \"duration\": \"month\",\n        \"percentage\": 5.0,\n        \"frequency\": \"12\",\n        \"isPaid\": false,\n        \"userId\": \"01gabcde-fgh1-ijk2-lmn3-opq4rst5uvw6\",\n        \"type\": \"taken\",\n        \"interestType\": \"simple\",\n        \"account\": \"01fgy5q3-p8n7-m6l5-k4j3-h2g1f0e9d8c7\"\n    }\n}"
            }
          ]
        },
        {
          "name": "Get Debts",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{auth_token}}",
                "type": "text",
                "description": "JWT token obtained from login."
              }
            ],
            "url": {
              "raw": "{{base_url}}/interest/debts?page=1&pageSize=10&duration=all&q=Loan&type=taken&sortBy=dueDate&sortOrder=asc",
              "host": ["{{base_url}}"],
              "path": ["interest", "debts"],
              "query": [
                {
                  "key": "page",
                  "value": "1",
                  "description": "(Optional) Integer: Page number (default: 1)."
                },
                {
                  "key": "pageSize",
                  "value": "10",
                  "description": "(Optional) Integer: Items per page (default: 10)."
                },
                {
                  "key": "duration",
                  "value": "all",
                  "description": "(Optional) String: Filter by creation date period. Options: 'today', 'thisWeek', 'thisMonth', 'thisYear', 'all', or custom 'YYYY-MM-DD,YYYY-MM-DD'."
                },
                {
                  "key": "q",
                  "value": "Loan",
                  "description": "(Optional) String: Search term for description, amount, involved user name, or account name.",
                  "disabled": true
                },
                {
                  "key": "type",
                  "value": "taken",
                  "description": "(Optional) String: Filter by debt type ('given' or 'taken')."
                },
                {
                  "key": "sortBy",
                  "value": "dueDate",
                  "description": "(Optional) String: Field to sort by (any valid column in Debts table, or `user.name`, `account.name`). Default: 'createdAt'."
                },
                {
                  "key": "sortOrder",
                  "value": "asc",
                  "description": "(Optional) String: Sort order ('asc' or 'desc'). Default: 'desc'."
                }
              ]
            },
            "description": "Retrieves a list of debt records where the authenticated user is either the creator or the involved party. Includes filtering, pagination, and sorting options.\n\n**Authentication:** Required (`Bearer Token`).\n\n**Responses:**\n*   `200 OK`: Returns a list of debts (with related user and account details) and pagination info.\n*   `401 Unauthorized`/`403 Forbidden`: Invalid token.\n*   `500 Internal Server Error`: Database error."
          },
          "response": [
            {
              "name": "Success - Debts List",
              "originalRequest": {},
              "status": "OK",
              "code": 200,
              "_postman_previewlanguage": "json",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "cookie": [],
              "body": "{\n    \"data\": [\n        {\n            \"debts\": {\n                \"id\": \"01k9h4d5-f6g7-h8i9-j0k1-l2m3n4o5p6q7\",\n                \"createdAt\": \"2024-07-21T13:00:00.123Z\",\n                \"amount\": 1000.00,\n                \"premiumAmount\": 50.00,\n                \"description\": \"Personal loan from John Doe\",\n                \"dueDate\": \"2025-07-21\",\n                \"isPaid\": false,\n                \"type\": \"taken\"\n            },\n            \"account\": {\n                 \"id\": \"01fgy5q3-p8n7-m6l5-k4j3-h2g1f0e9d8c7\",\n                 \"name\": \"Main Checking Account\",\n                 \"currency\": \"USD\"\n            },\n            \"user\": { \n                 \"id\": \"01gabcde-fgh1-ijk2-lmn3-opq4rst5uvw6\",\n                 \"name\": \"John Doe\",\n                 \"email\": \"john.doe@example.com\",\n                 \"profilePic\": \"...\"\n            }\n        }\n    ],\n    \"totalCount\": 2,\n    \"totalPages\": 1,\n    \"currentPage\": 1,\n    \"pageSize\": 10\n}"
            }
          ]
        },
        {
          "name": "Update Debt Record",
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{auth_token}}",
                "type": "text",
                "description": "JWT token obtained from login."
              },
              {
                "key": "Content-Type",
                "value": "application/json",
                "type": "text"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"description\": \"Personal loan from John Doe (Updated info)\",\n    \"isPaid\": false,\n    \"duration\": \"month\",\n    \"frequency\": \"10\" \n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{base_url}}/interest/debts/:debtId",
              "host": ["{{base_url}}"],
              "path": ["interest", "debts", ":debtId"],
              "variable": [
                {
                  "key": "debtId",
                  "value": "01k9h4d5-f6g7-h8i9-j0k1-l2m3n4o5p6q7",
                  "description": "(Required) The UUID of the debt record to update."
                }
              ]
            },
            "description": "Updates specific fields (description, isPaid, duration, frequency) of an existing debt record. Only the creator can update details other than `isPaid`. Either creator or involved user can mark as paid.\n\n**Authentication:** Required (`Bearer Token`).\n\n**Path Variable:**\n*   `debtId` (UUID, required): ID of the debt.\n\n**Body (JSON):** Provide only the fields to update.\n*   `description` (string, optional)\n*   `isPaid` (boolean, optional)\n*   `duration` (string, optional) - Note: Updating duration/frequency does NOT recalculate the due date.\n*   `frequency` (string, optional) - Note: Updating duration/frequency does NOT recalculate the due date.\n\n**Responses:**\n*   `200 OK`: Debt updated successfully.\n*   `401 Unauthorized`/`403 Forbidden`: Invalid token or insufficient permissions.\n*   `404 Not Found`: Debt not found.\n*   `500 Internal Server Error`: Database error."
          },
          "response": [
            {
              "name": "Success - Debt Updated",
              "originalRequest": {},
              "status": "OK",
              "code": 200,
              "_postman_previewlanguage": "json",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "cookie": [],
              "body": "{\n    \"message\": \"Debt updated successfully\"\n}"
            }
          ]
        },
        {
          "name": "Mark Debt as Paid",
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{auth_token}}",
                "type": "text",
                "description": "JWT token obtained from login."
              }
            ],
            "url": {
              "raw": "{{base_url}}/interest/debts/:debtId/mark-paid",
              "host": ["{{base_url}}"],
              "path": ["interest", "debts", ":debtId", "mark-paid"],
              "variable": [
                {
                  "key": "debtId",
                  "value": "01k9h4d5-f6g7-h8i9-j0k1-l2m3n4o5p6q7",
                  "description": "(Required) The UUID of the debt record to mark as paid."
                }
              ]
            },
            "description": "Marks a specific debt record as paid (`isPaid = true`). The authenticated user must be either the creator or the involved user.\n\n**Authentication:** Required (`Bearer Token`).\n\n**Path Variable:**\n*   `debtId` (UUID, required): ID of the debt.\n\n**Responses:**\n*   `200 OK`: Debt marked as paid successfully.\n*   `401 Unauthorized`/`403 Forbidden`: Invalid token or insufficient permissions.\n*   `404 Not Found`: Debt not found.\n*   `500 Internal Server Error`: Database error."
          },
          "response": [
            {
              "name": "Success - Debt Marked Paid",
              "originalRequest": {},
              "status": "OK",
              "code": 200,
              "_postman_previewlanguage": "json",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "cookie": [],
              "body": "{\n    \"message\": \"Debt marked as paid\"\n}"
            }
          ]
        },
        {
          "name": "Delete Debt Record",
          "request": {
            "method": "DELETE",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{auth_token}}",
                "type": "text",
                "description": "JWT token obtained from login."
              }
            ],
            "url": {
              "raw": "{{base_url}}/interest/debts/:debtId",
              "host": ["{{base_url}}"],
              "path": ["interest", "debts", ":debtId"],
              "variable": [
                {
                  "key": "debtId",
                  "value": "01k9h4d5-f6g7-h8i9-j0k1-l2m3n4o5p6q7",
                  "description": "(Required) The UUID of the debt record to delete."
                }
              ]
            },
            "description": "**DANGER ZONE:** Deletes a debt record. Only the creator of the debt record can delete it. This action is irreversible.\n\n**Authentication:** Required (`Bearer Token`).\n\n**Path Variable:**\n*   `debtId` (UUID, required): ID of the debt to delete.\n\n**Responses:**\n*   `200 OK`: Debt deleted successfully.\n*   `401 Unauthorized`/`403 Forbidden`: Invalid token or not creator.\n*   `404 Not Found`: Debt not found.\n*   `500 Internal Server Error`: Database error."
          },
          "response": [
            {
              "name": "Success - Debt Deleted",
              "originalRequest": {},
              "status": "OK",
              "code": 200,
              "_postman_previewlanguage": "json",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "cookie": [],
              "body": "{\n    \"message\": \"Debt deleted successfully\"\n}"
            }
          ]
        },
        {
          "name": "Calculate Interest (Utility)",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{auth_token}}",
                "type": "text",
                "description": "JWT token obtained from login."
              },
              {
                "key": "Content-Type",
                "value": "application/json",
                "type": "text"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"amount\": 10000,\n    \"percentage\": 5,\n    \"type\": \"compound\",\n    \"duration\": \"year\", \n    \"compoundingFrequency\": 12 \n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{base_url}}/interest/calculate",
              "host": ["{{base_url}}"],
              "path": ["interest", "calculate"]
            },
            "description": "**Utility Endpoint:** Calculates simple or compound interest based on the provided parameters. Does not store any data.\n\n**Authentication:** Required (`Bearer Token`).\n\n**Body (JSON):**\n*   `amount` (number, required): Principal amount.\n*   `percentage` (number, required): Annual interest rate (e.g., 5 for 5%).\n*   `type` (enum string, required): 'simple' or 'compound'.\n*   `duration` (string | number, required): Time period for calculation. Options: 'day', 'week', 'month', 'year' (requires frequency), number (interpreted as years), or custom date range 'YYYY-MM-DD,YYYY-MM-DD'.\n*   `compoundingFrequency` (number, optional): Number of times interest is compounded per year (e.g., 1 for annually, 12 for monthly, 365 for daily). Required if `type` is 'compound' and `duration` is a unit string.\n*   `frequency` (number, optional): Number of duration units (e.g., 12 if `duration` is 'month'). Required if `duration` is a unit string ('day', 'week', 'month', 'year').\n\n**Responses:**\n*   `200 OK`: Returns calculated `interest` and `totalAmount`.\n*   `400 Bad Request`: Invalid input parameters (amount, percentage, type, duration, frequency).\n*   `401 Unauthorized`/`403 Forbidden`: Invalid token."
          },
          "response": [
            {
              "name": "Success - Simple Interest Calculated",
              "originalRequest": {},
              "status": "OK",
              "code": 200,
              "_postman_previewlanguage": "json",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "cookie": [],
              "body": "{\n    \"interest\": 500.00,\n    \"totalAmount\": 10500.00\n}"
            },
            {
              "name": "Success - Compound Interest Calculated",
              "originalRequest": {},
              "status": "OK",
              "code": 200,
              "_postman_previewlanguage": "json",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "cookie": [],
              "body": "{\n    \"interest\": 511.62,\n    \"totalAmount\": 10511.62\n}"
            }
          ]
        }
      ]
    },
    {
      "name": "AI Assistant",
      "description": "Endpoints for interacting with the AI financial assistant.",
      "item": [
        {
          "name": "Process Prompt",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{auth_token}}",
                "type": "text",
                "description": "JWT token obtained from login."
              },
              {
                "key": "Content-Type",
                "value": "application/json",
                "type": "text"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"prompt\": \"Add a 250 INR expense for coffee at Starbucks today to my Main Checking account.\",\n    \"sessionId\": \"optional-session-id-for-continuity\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{base_url}}/ai/process",
              "host": ["{{base_url}}"],
              "path": ["ai", "process"]
            },
            "description": "Processes a natural language prompt using the AI assistant.\n\n**Process:**\n1.  Retrieves and decrypts the user's configured AI API key.\n2.  Fetches recent conversation history for the session (if `sessionId` is provided).\n3.  Constructs the prompt with system instructions and history.\n4.  Calls the AI model (e.g., Google Gemini) with the prompt and available tools.\n5.  Handles tool calls and results iteratively.\n6.  Saves the user prompt and final assistant response (including tool usage) to the history.\n7.  Returns the AI's text response, session ID, and any tool call/result details.\n\n**Authentication:** Required (`Bearer Token`).\n\n**Body (JSON):**\n*   `prompt` (string, required): The user's natural language request.\n*   `sessionId` (string, optional): ID of an ongoing conversation to maintain context.\n\n**Responses:**\n*   `200 OK`: Returns the AI response, session ID, and tool details.\n*   `400 Bad Request`: Invalid prompt or tool arguments.\n*   `401 Unauthorized`/`403 Forbidden`: Invalid token or AI API key not configured/invalid.\n*   `429 Too Many Requests`: AI provider rate limit reached.\n*   `500 Internal Server Error`: Error fetching/decrypting key, database error, or unhandled AI/tool error.\n*   `502 Bad Gateway`: Error communicating with the AI provider."
          },
          "response": [
            {
              "name": "Success - AI Response (with Tool Call)",
              "originalRequest": {},
              "status": "OK",
              "code": 200,
              "_postman_previewlanguage": "json",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "cookie": [],
              "body": "{\n    \"response\": \"Okay, I can add that expense. Can you please confirm the account ID for 'Main Checking account'? I found ID: 01fgy5q3-p8n7-m6l5-k4j3-h2g1f0e9d8c7.\",\n    \"sessionId\": \"new-or-existing-session-id\",\n    \"toolCalls\": [\n        {\n            \"toolCallId\": \"tool-call-123\",\n            \"toolName\": \"identifyAccountForAction\",\n            \"args\": {\n                \"accountIdentifier\": \"Main Checking account\"\n            }\n        }\n    ],\n    \"toolResults\": [\n        {\n            \"toolCallId\": \"tool-call-123\",\n            \"toolName\": \"identifyAccountForAction\",\n            \"result\": \"{\\\"success\\\":true,\\\"id\\\":\\\"01fgy5q3-p8n7-m6l5-k4j3-h2g1f0e9d8c7\\\",\\\"confirmationNeeded\\\":true,\\\"message\\\":\\\"Found account. Please confirm if this is the correct one for the transaction.\\\",\\\"details\\\":\\\"Account: Main Checking account, Balance: ₹1,650.00\\\"}\"\n        }\n    ]\n}"
            },
            {
              "name": "Error - AI Key Not Configured",
              "originalRequest": {},
              "status": "Forbidden",
              "code": 403,
              "_postman_previewlanguage": "json",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "cookie": [],
              "body": "{\n    \"message\": \"AI API key not configured for this user. Please add it in your profile.\",\n    \"status\": 403\n}"
            }
          ]
        }
      ]
    }
  ]
}
