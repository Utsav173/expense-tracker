---
description: 
globs: 
alwaysApply: true
---
# Coding Conventions and Best Practices

## TypeScript
Both frontend and backend use TypeScript. Key configuration files:
- [frontend/tsconfig.json](mdc:frontend/tsconfig.json): Frontend TypeScript configuration
- [backend/tsconfig.json](mdc:backend/tsconfig.json): Backend TypeScript configuration

### TypeScript Guidelines
- Use strict type checking
- Avoid using `any` type
- Prefer interfaces over type aliases for object types
- Use type guards for runtime type checking
- Document complex types with JSDoc comments

## Code Formatting
The project uses Prettier for code formatting:
- [frontend/.prettierrc](mdc:frontend/.prettierrc): Frontend Prettier configuration
- [backend/.prettierrc](mdc:backend/.prettierrc): Backend Prettier configuration

### Formatting Rules
- Use 2 spaces for indentation
- Use single quotes for strings
- Use semicolons at the end of statements
- Maximum line length of 100 characters
- Trailing commas in multi-line objects and arrays

## Frontend Guidelines

### Component Structure
- Use Next.js App Router for routing
- Implement components in the `src/components` directory
- Follow atomic design principles
- Keep components focused and single-responsibility
- Use React.memo for expensive components
- Implement proper loading states

### State Management
- Use TanStack Query for server state
- Use React Context for global UI state
- Use local state for component-specific state
- Optimize re-renders with useMemo and useCallback

### Styling
- Follow Tailwind CSS for styling
- Use Shadcn UI components as base
- Keep custom styles in component files
- Use CSS modules for complex styles
- Follow mobile-first responsive design

### Testing
- Write unit tests for utilities and hooks
- Write integration tests for complex components
- Use React Testing Library for component tests
- Test accessibility with screen readers

## Backend Guidelines

### API Design
- Use Drizzle ORM for database operations
- Keep API routes organized by feature
- Follow RESTful API design principles
- Use Zod for input validation
- Implement proper error handling

### Security
- Use JWT for authentication
- Hash passwords with bcrypt
- Implement rate limiting
- Use secure headers (HSTS, CSP)
- Validate all user input

### Database
- Use migrations for schema changes
- Create appropriate indexes
- Use transactions for complex operations
- Implement proper error handling
- Use connection pooling

### Performance
- Implement caching where appropriate
- Optimize database queries
- Use proper indexing
- Monitor query performance
- Implement rate limiting

## Git Guidelines
- Use meaningful commit messages
- Follow conventional commits
- Create feature branches
- Keep commits atomic
- Review code before merging

## Documentation
- Document complex components with JSDoc
- Keep README files up to date
- Document API endpoints
- Add usage examples
- Document environment variables
